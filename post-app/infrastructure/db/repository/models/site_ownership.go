// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SiteOwnership is an object representing the database table.
type SiteOwnership struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	SiteID     int64     `boil:"site_id" json:"site_id" toml:"site_id" yaml:"site_id"`
	SNSCUserID int64     `boil:"snsc_user_id" json:"snsc_user_id" toml:"snsc_user_id" yaml:"snsc_user_id"`
	IsActive   bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`

	R *siteOwnershipR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L siteOwnershipL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SiteOwnershipColumns = struct {
	ID         string
	CreatedAt  string
	UpdatedAt  string
	SiteID     string
	SNSCUserID string
	IsActive   string
}{
	ID:         "id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	SiteID:     "site_id",
	SNSCUserID: "snsc_user_id",
	IsActive:   "is_active",
}

var SiteOwnershipTableColumns = struct {
	ID         string
	CreatedAt  string
	UpdatedAt  string
	SiteID     string
	SNSCUserID string
	IsActive   string
}{
	ID:         "site_ownership.id",
	CreatedAt:  "site_ownership.created_at",
	UpdatedAt:  "site_ownership.updated_at",
	SiteID:     "site_ownership.site_id",
	SNSCUserID: "site_ownership.snsc_user_id",
	IsActive:   "site_ownership.is_active",
}

// Generated where

var SiteOwnershipWhere = struct {
	ID         whereHelperint64
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	SiteID     whereHelperint64
	SNSCUserID whereHelperint64
	IsActive   whereHelperbool
}{
	ID:         whereHelperint64{field: "\"site_ownership\".\"id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"site_ownership\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"site_ownership\".\"updated_at\""},
	SiteID:     whereHelperint64{field: "\"site_ownership\".\"site_id\""},
	SNSCUserID: whereHelperint64{field: "\"site_ownership\".\"snsc_user_id\""},
	IsActive:   whereHelperbool{field: "\"site_ownership\".\"is_active\""},
}

// SiteOwnershipRels is where relationship names are stored.
var SiteOwnershipRels = struct {
	Site     string
	SNSCUser string
}{
	Site:     "Site",
	SNSCUser: "SNSCUser",
}

// siteOwnershipR is where relationships are stored.
type siteOwnershipR struct {
	Site     *Site     `boil:"Site" json:"Site" toml:"Site" yaml:"Site"`
	SNSCUser *SNSCUser `boil:"SNSCUser" json:"SNSCUser" toml:"SNSCUser" yaml:"SNSCUser"`
}

// NewStruct creates a new relationship struct
func (*siteOwnershipR) NewStruct() *siteOwnershipR {
	return &siteOwnershipR{}
}

func (r *siteOwnershipR) GetSite() *Site {
	if r == nil {
		return nil
	}
	return r.Site
}

func (r *siteOwnershipR) GetSNSCUser() *SNSCUser {
	if r == nil {
		return nil
	}
	return r.SNSCUser
}

// siteOwnershipL is where Load methods for each relationship are stored.
type siteOwnershipL struct{}

var (
	siteOwnershipAllColumns            = []string{"id", "created_at", "updated_at", "site_id", "snsc_user_id", "is_active"}
	siteOwnershipColumnsWithoutDefault = []string{"created_at", "updated_at", "site_id", "snsc_user_id", "is_active"}
	siteOwnershipColumnsWithDefault    = []string{"id"}
	siteOwnershipPrimaryKeyColumns     = []string{"id"}
	siteOwnershipGeneratedColumns      = []string{}
)

type (
	// SiteOwnershipSlice is an alias for a slice of pointers to SiteOwnership.
	// This should almost always be used instead of []SiteOwnership.
	SiteOwnershipSlice []*SiteOwnership
	// SiteOwnershipHook is the signature for custom SiteOwnership hook methods
	SiteOwnershipHook func(context.Context, boil.ContextExecutor, *SiteOwnership) error

	siteOwnershipQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	siteOwnershipType                 = reflect.TypeOf(&SiteOwnership{})
	siteOwnershipMapping              = queries.MakeStructMapping(siteOwnershipType)
	siteOwnershipPrimaryKeyMapping, _ = queries.BindMapping(siteOwnershipType, siteOwnershipMapping, siteOwnershipPrimaryKeyColumns)
	siteOwnershipInsertCacheMut       sync.RWMutex
	siteOwnershipInsertCache          = make(map[string]insertCache)
	siteOwnershipUpdateCacheMut       sync.RWMutex
	siteOwnershipUpdateCache          = make(map[string]updateCache)
	siteOwnershipUpsertCacheMut       sync.RWMutex
	siteOwnershipUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var siteOwnershipAfterSelectMu sync.Mutex
var siteOwnershipAfterSelectHooks []SiteOwnershipHook

var siteOwnershipBeforeInsertMu sync.Mutex
var siteOwnershipBeforeInsertHooks []SiteOwnershipHook
var siteOwnershipAfterInsertMu sync.Mutex
var siteOwnershipAfterInsertHooks []SiteOwnershipHook

var siteOwnershipBeforeUpdateMu sync.Mutex
var siteOwnershipBeforeUpdateHooks []SiteOwnershipHook
var siteOwnershipAfterUpdateMu sync.Mutex
var siteOwnershipAfterUpdateHooks []SiteOwnershipHook

var siteOwnershipBeforeDeleteMu sync.Mutex
var siteOwnershipBeforeDeleteHooks []SiteOwnershipHook
var siteOwnershipAfterDeleteMu sync.Mutex
var siteOwnershipAfterDeleteHooks []SiteOwnershipHook

var siteOwnershipBeforeUpsertMu sync.Mutex
var siteOwnershipBeforeUpsertHooks []SiteOwnershipHook
var siteOwnershipAfterUpsertMu sync.Mutex
var siteOwnershipAfterUpsertHooks []SiteOwnershipHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SiteOwnership) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteOwnershipAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SiteOwnership) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteOwnershipBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SiteOwnership) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteOwnershipAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SiteOwnership) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteOwnershipBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SiteOwnership) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteOwnershipAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SiteOwnership) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteOwnershipBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SiteOwnership) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteOwnershipAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SiteOwnership) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteOwnershipBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SiteOwnership) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteOwnershipAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSiteOwnershipHook registers your hook function for all future operations.
func AddSiteOwnershipHook(hookPoint boil.HookPoint, siteOwnershipHook SiteOwnershipHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		siteOwnershipAfterSelectMu.Lock()
		siteOwnershipAfterSelectHooks = append(siteOwnershipAfterSelectHooks, siteOwnershipHook)
		siteOwnershipAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		siteOwnershipBeforeInsertMu.Lock()
		siteOwnershipBeforeInsertHooks = append(siteOwnershipBeforeInsertHooks, siteOwnershipHook)
		siteOwnershipBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		siteOwnershipAfterInsertMu.Lock()
		siteOwnershipAfterInsertHooks = append(siteOwnershipAfterInsertHooks, siteOwnershipHook)
		siteOwnershipAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		siteOwnershipBeforeUpdateMu.Lock()
		siteOwnershipBeforeUpdateHooks = append(siteOwnershipBeforeUpdateHooks, siteOwnershipHook)
		siteOwnershipBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		siteOwnershipAfterUpdateMu.Lock()
		siteOwnershipAfterUpdateHooks = append(siteOwnershipAfterUpdateHooks, siteOwnershipHook)
		siteOwnershipAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		siteOwnershipBeforeDeleteMu.Lock()
		siteOwnershipBeforeDeleteHooks = append(siteOwnershipBeforeDeleteHooks, siteOwnershipHook)
		siteOwnershipBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		siteOwnershipAfterDeleteMu.Lock()
		siteOwnershipAfterDeleteHooks = append(siteOwnershipAfterDeleteHooks, siteOwnershipHook)
		siteOwnershipAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		siteOwnershipBeforeUpsertMu.Lock()
		siteOwnershipBeforeUpsertHooks = append(siteOwnershipBeforeUpsertHooks, siteOwnershipHook)
		siteOwnershipBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		siteOwnershipAfterUpsertMu.Lock()
		siteOwnershipAfterUpsertHooks = append(siteOwnershipAfterUpsertHooks, siteOwnershipHook)
		siteOwnershipAfterUpsertMu.Unlock()
	}
}

// One returns a single siteOwnership record from the query.
func (q siteOwnershipQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SiteOwnership, error) {
	o := &SiteOwnership{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for site_ownership")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SiteOwnership records from the query.
func (q siteOwnershipQuery) All(ctx context.Context, exec boil.ContextExecutor) (SiteOwnershipSlice, error) {
	var o []*SiteOwnership

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SiteOwnership slice")
	}

	if len(siteOwnershipAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SiteOwnership records in the query.
func (q siteOwnershipQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count site_ownership rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q siteOwnershipQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if site_ownership exists")
	}

	return count > 0, nil
}

// Site pointed to by the foreign key.
func (o *SiteOwnership) Site(mods ...qm.QueryMod) siteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SiteID),
	}

	queryMods = append(queryMods, mods...)

	return Sites(queryMods...)
}

// SNSCUser pointed to by the foreign key.
func (o *SiteOwnership) SNSCUser(mods ...qm.QueryMod) snscUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SNSCUserID),
	}

	queryMods = append(queryMods, mods...)

	return SNSCUsers(queryMods...)
}

// LoadSite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (siteOwnershipL) LoadSite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSiteOwnership interface{}, mods queries.Applicator) error {
	var slice []*SiteOwnership
	var object *SiteOwnership

	if singular {
		var ok bool
		object, ok = maybeSiteOwnership.(*SiteOwnership)
		if !ok {
			object = new(SiteOwnership)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSiteOwnership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSiteOwnership))
			}
		}
	} else {
		s, ok := maybeSiteOwnership.(*[]*SiteOwnership)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSiteOwnership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSiteOwnership))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &siteOwnershipR{}
		}
		args[object.SiteID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteOwnershipR{}
			}

			args[obj.SiteID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`site`),
		qm.WhereIn(`site.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Site")
	}

	var resultSlice []*Site
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Site")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for site")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for site")
	}

	if len(siteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Site = foreign
		if foreign.R == nil {
			foreign.R = &siteR{}
		}
		foreign.R.SiteOwnerships = append(foreign.R.SiteOwnerships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SiteID == foreign.ID {
				local.R.Site = foreign
				if foreign.R == nil {
					foreign.R = &siteR{}
				}
				foreign.R.SiteOwnerships = append(foreign.R.SiteOwnerships, local)
				break
			}
		}
	}

	return nil
}

// LoadSNSCUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (siteOwnershipL) LoadSNSCUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSiteOwnership interface{}, mods queries.Applicator) error {
	var slice []*SiteOwnership
	var object *SiteOwnership

	if singular {
		var ok bool
		object, ok = maybeSiteOwnership.(*SiteOwnership)
		if !ok {
			object = new(SiteOwnership)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSiteOwnership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSiteOwnership))
			}
		}
	} else {
		s, ok := maybeSiteOwnership.(*[]*SiteOwnership)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSiteOwnership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSiteOwnership))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &siteOwnershipR{}
		}
		args[object.SNSCUserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &siteOwnershipR{}
			}

			args[obj.SNSCUserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`snsc_user`),
		qm.WhereIn(`snsc_user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SNSCUser")
	}

	var resultSlice []*SNSCUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SNSCUser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for snsc_user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for snsc_user")
	}

	if len(snscUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SNSCUser = foreign
		if foreign.R == nil {
			foreign.R = &snscUserR{}
		}
		foreign.R.SiteOwnerships = append(foreign.R.SiteOwnerships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SNSCUserID == foreign.ID {
				local.R.SNSCUser = foreign
				if foreign.R == nil {
					foreign.R = &snscUserR{}
				}
				foreign.R.SiteOwnerships = append(foreign.R.SiteOwnerships, local)
				break
			}
		}
	}

	return nil
}

// SetSite of the siteOwnership to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.SiteOwnerships.
func (o *SiteOwnership) SetSite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Site) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"site_ownership\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"site_id"}),
		strmangle.WhereClause("\"", "\"", 2, siteOwnershipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SiteID = related.ID
	if o.R == nil {
		o.R = &siteOwnershipR{
			Site: related,
		}
	} else {
		o.R.Site = related
	}

	if related.R == nil {
		related.R = &siteR{
			SiteOwnerships: SiteOwnershipSlice{o},
		}
	} else {
		related.R.SiteOwnerships = append(related.R.SiteOwnerships, o)
	}

	return nil
}

// SetSNSCUser of the siteOwnership to the related item.
// Sets o.R.SNSCUser to related.
// Adds o to related.R.SiteOwnerships.
func (o *SiteOwnership) SetSNSCUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SNSCUser) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"site_ownership\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"snsc_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, siteOwnershipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SNSCUserID = related.ID
	if o.R == nil {
		o.R = &siteOwnershipR{
			SNSCUser: related,
		}
	} else {
		o.R.SNSCUser = related
	}

	if related.R == nil {
		related.R = &snscUserR{
			SiteOwnerships: SiteOwnershipSlice{o},
		}
	} else {
		related.R.SiteOwnerships = append(related.R.SiteOwnerships, o)
	}

	return nil
}

// SiteOwnerships retrieves all the records using an executor.
func SiteOwnerships(mods ...qm.QueryMod) siteOwnershipQuery {
	mods = append(mods, qm.From("\"site_ownership\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"site_ownership\".*"})
	}

	return siteOwnershipQuery{q}
}

// FindSiteOwnership retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSiteOwnership(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SiteOwnership, error) {
	siteOwnershipObj := &SiteOwnership{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"site_ownership\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, siteOwnershipObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from site_ownership")
	}

	if err = siteOwnershipObj.doAfterSelectHooks(ctx, exec); err != nil {
		return siteOwnershipObj, err
	}

	return siteOwnershipObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SiteOwnership) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no site_ownership provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteOwnershipColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	siteOwnershipInsertCacheMut.RLock()
	cache, cached := siteOwnershipInsertCache[key]
	siteOwnershipInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			siteOwnershipAllColumns,
			siteOwnershipColumnsWithDefault,
			siteOwnershipColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(siteOwnershipType, siteOwnershipMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(siteOwnershipType, siteOwnershipMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"site_ownership\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"site_ownership\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into site_ownership")
	}

	if !cached {
		siteOwnershipInsertCacheMut.Lock()
		siteOwnershipInsertCache[key] = cache
		siteOwnershipInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SiteOwnership.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SiteOwnership) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	siteOwnershipUpdateCacheMut.RLock()
	cache, cached := siteOwnershipUpdateCache[key]
	siteOwnershipUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			siteOwnershipAllColumns,
			siteOwnershipPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update site_ownership, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"site_ownership\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, siteOwnershipPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(siteOwnershipType, siteOwnershipMapping, append(wl, siteOwnershipPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update site_ownership row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for site_ownership")
	}

	if !cached {
		siteOwnershipUpdateCacheMut.Lock()
		siteOwnershipUpdateCache[key] = cache
		siteOwnershipUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q siteOwnershipQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for site_ownership")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for site_ownership")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SiteOwnershipSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteOwnershipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"site_ownership\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, siteOwnershipPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in siteOwnership slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all siteOwnership")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SiteOwnership) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no site_ownership provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteOwnershipColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	siteOwnershipUpsertCacheMut.RLock()
	cache, cached := siteOwnershipUpsertCache[key]
	siteOwnershipUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			siteOwnershipAllColumns,
			siteOwnershipColumnsWithDefault,
			siteOwnershipColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			siteOwnershipAllColumns,
			siteOwnershipPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert site_ownership, could not build update column list")
		}

		ret := strmangle.SetComplement(siteOwnershipAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(siteOwnershipPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert site_ownership, could not build conflict column list")
			}

			conflict = make([]string, len(siteOwnershipPrimaryKeyColumns))
			copy(conflict, siteOwnershipPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"site_ownership\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(siteOwnershipType, siteOwnershipMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(siteOwnershipType, siteOwnershipMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert site_ownership")
	}

	if !cached {
		siteOwnershipUpsertCacheMut.Lock()
		siteOwnershipUpsertCache[key] = cache
		siteOwnershipUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SiteOwnership record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SiteOwnership) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SiteOwnership provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), siteOwnershipPrimaryKeyMapping)
	sql := "DELETE FROM \"site_ownership\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from site_ownership")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for site_ownership")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q siteOwnershipQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no siteOwnershipQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from site_ownership")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for site_ownership")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SiteOwnershipSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(siteOwnershipBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteOwnershipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"site_ownership\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, siteOwnershipPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from siteOwnership slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for site_ownership")
	}

	if len(siteOwnershipAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SiteOwnership) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSiteOwnership(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SiteOwnershipSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SiteOwnershipSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteOwnershipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"site_ownership\".* FROM \"site_ownership\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, siteOwnershipPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SiteOwnershipSlice")
	}

	*o = slice

	return nil
}

// SiteOwnershipExists checks if the SiteOwnership row exists.
func SiteOwnershipExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"site_ownership\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if site_ownership exists")
	}

	return exists, nil
}

// Exists checks if the SiteOwnership row exists.
func (o *SiteOwnership) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SiteOwnershipExists(ctx, exec, o.ID)
}
