// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SNSUserAccount is an object representing the database table.
type SNSUserAccount struct {
	Name              null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Biography         null.String `boil:"biography" json:"biography,omitempty" toml:"biography" yaml:"biography,omitempty"`
	FollowsCount      null.Int    `boil:"follows_count" json:"follows_count,omitempty" toml:"follows_count" yaml:"follows_count,omitempty"`
	FollowersCount    null.Int    `boil:"followers_count" json:"followers_count,omitempty" toml:"followers_count" yaml:"followers_count,omitempty"`
	PostCount         null.Int    `boil:"post_count" json:"post_count,omitempty" toml:"post_count" yaml:"post_count,omitempty"`
	ProfilePictureURL null.String `boil:"profile_picture_url" json:"profile_picture_url,omitempty" toml:"profile_picture_url" yaml:"profile_picture_url,omitempty"`
	Website           null.String `boil:"website" json:"website,omitempty" toml:"website" yaml:"website,omitempty"`
	IsActive          bool        `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	SNSID             int64       `boil:"sns_id" json:"sns_id" toml:"sns_id" yaml:"sns_id"`

	R *snsUserAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L snsUserAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SNSUserAccountColumns = struct {
	Name              string
	Biography         string
	FollowsCount      string
	FollowersCount    string
	PostCount         string
	ProfilePictureURL string
	Website           string
	IsActive          string
	CreatedAt         string
	UpdatedAt         string
	SNSID             string
}{
	Name:              "name",
	Biography:         "biography",
	FollowsCount:      "follows_count",
	FollowersCount:    "followers_count",
	PostCount:         "post_count",
	ProfilePictureURL: "profile_picture_url",
	Website:           "website",
	IsActive:          "is_active",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	SNSID:             "sns_id",
}

var SNSUserAccountTableColumns = struct {
	Name              string
	Biography         string
	FollowsCount      string
	FollowersCount    string
	PostCount         string
	ProfilePictureURL string
	Website           string
	IsActive          string
	CreatedAt         string
	UpdatedAt         string
	SNSID             string
}{
	Name:              "sns_user_account.name",
	Biography:         "sns_user_account.biography",
	FollowsCount:      "sns_user_account.follows_count",
	FollowersCount:    "sns_user_account.followers_count",
	PostCount:         "sns_user_account.post_count",
	ProfilePictureURL: "sns_user_account.profile_picture_url",
	Website:           "sns_user_account.website",
	IsActive:          "sns_user_account.is_active",
	CreatedAt:         "sns_user_account.created_at",
	UpdatedAt:         "sns_user_account.updated_at",
	SNSID:             "sns_user_account.sns_id",
}

// Generated where

var SNSUserAccountWhere = struct {
	Name              whereHelpernull_String
	Biography         whereHelpernull_String
	FollowsCount      whereHelpernull_Int
	FollowersCount    whereHelpernull_Int
	PostCount         whereHelpernull_Int
	ProfilePictureURL whereHelpernull_String
	Website           whereHelpernull_String
	IsActive          whereHelperbool
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	SNSID             whereHelperint64
}{
	Name:              whereHelpernull_String{field: "\"sns_user_account\".\"name\""},
	Biography:         whereHelpernull_String{field: "\"sns_user_account\".\"biography\""},
	FollowsCount:      whereHelpernull_Int{field: "\"sns_user_account\".\"follows_count\""},
	FollowersCount:    whereHelpernull_Int{field: "\"sns_user_account\".\"followers_count\""},
	PostCount:         whereHelpernull_Int{field: "\"sns_user_account\".\"post_count\""},
	ProfilePictureURL: whereHelpernull_String{field: "\"sns_user_account\".\"profile_picture_url\""},
	Website:           whereHelpernull_String{field: "\"sns_user_account\".\"website\""},
	IsActive:          whereHelperbool{field: "\"sns_user_account\".\"is_active\""},
	CreatedAt:         whereHelpertime_Time{field: "\"sns_user_account\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"sns_user_account\".\"updated_at\""},
	SNSID:             whereHelperint64{field: "\"sns_user_account\".\"sns_id\""},
}

// SNSUserAccountRels is where relationship names are stored.
var SNSUserAccountRels = struct {
	SN string
}{
	SN: "SN",
}

// snsUserAccountR is where relationships are stored.
type snsUserAccountR struct {
	SN *SN `boil:"SN" json:"SN" toml:"SN" yaml:"SN"`
}

// NewStruct creates a new relationship struct
func (*snsUserAccountR) NewStruct() *snsUserAccountR {
	return &snsUserAccountR{}
}

func (r *snsUserAccountR) GetSN() *SN {
	if r == nil {
		return nil
	}
	return r.SN
}

// snsUserAccountL is where Load methods for each relationship are stored.
type snsUserAccountL struct{}

var (
	snsUserAccountAllColumns            = []string{"name", "biography", "follows_count", "followers_count", "post_count", "profile_picture_url", "website", "is_active", "created_at", "updated_at", "sns_id"}
	snsUserAccountColumnsWithoutDefault = []string{"is_active", "created_at", "updated_at", "sns_id"}
	snsUserAccountColumnsWithDefault    = []string{"name", "biography", "follows_count", "followers_count", "post_count", "profile_picture_url", "website"}
	snsUserAccountPrimaryKeyColumns     = []string{"sns_id"}
	snsUserAccountGeneratedColumns      = []string{}
)

type (
	// SNSUserAccountSlice is an alias for a slice of pointers to SNSUserAccount.
	// This should almost always be used instead of []SNSUserAccount.
	SNSUserAccountSlice []*SNSUserAccount
	// SNSUserAccountHook is the signature for custom SNSUserAccount hook methods
	SNSUserAccountHook func(context.Context, boil.ContextExecutor, *SNSUserAccount) error

	snsUserAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	snsUserAccountType                 = reflect.TypeOf(&SNSUserAccount{})
	snsUserAccountMapping              = queries.MakeStructMapping(snsUserAccountType)
	snsUserAccountPrimaryKeyMapping, _ = queries.BindMapping(snsUserAccountType, snsUserAccountMapping, snsUserAccountPrimaryKeyColumns)
	snsUserAccountInsertCacheMut       sync.RWMutex
	snsUserAccountInsertCache          = make(map[string]insertCache)
	snsUserAccountUpdateCacheMut       sync.RWMutex
	snsUserAccountUpdateCache          = make(map[string]updateCache)
	snsUserAccountUpsertCacheMut       sync.RWMutex
	snsUserAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var snsUserAccountAfterSelectMu sync.Mutex
var snsUserAccountAfterSelectHooks []SNSUserAccountHook

var snsUserAccountBeforeInsertMu sync.Mutex
var snsUserAccountBeforeInsertHooks []SNSUserAccountHook
var snsUserAccountAfterInsertMu sync.Mutex
var snsUserAccountAfterInsertHooks []SNSUserAccountHook

var snsUserAccountBeforeUpdateMu sync.Mutex
var snsUserAccountBeforeUpdateHooks []SNSUserAccountHook
var snsUserAccountAfterUpdateMu sync.Mutex
var snsUserAccountAfterUpdateHooks []SNSUserAccountHook

var snsUserAccountBeforeDeleteMu sync.Mutex
var snsUserAccountBeforeDeleteHooks []SNSUserAccountHook
var snsUserAccountAfterDeleteMu sync.Mutex
var snsUserAccountAfterDeleteHooks []SNSUserAccountHook

var snsUserAccountBeforeUpsertMu sync.Mutex
var snsUserAccountBeforeUpsertHooks []SNSUserAccountHook
var snsUserAccountAfterUpsertMu sync.Mutex
var snsUserAccountAfterUpsertHooks []SNSUserAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SNSUserAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsUserAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SNSUserAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsUserAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SNSUserAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsUserAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SNSUserAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsUserAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SNSUserAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsUserAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SNSUserAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsUserAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SNSUserAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsUserAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SNSUserAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsUserAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SNSUserAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsUserAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSNSUserAccountHook registers your hook function for all future operations.
func AddSNSUserAccountHook(hookPoint boil.HookPoint, snsUserAccountHook SNSUserAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		snsUserAccountAfterSelectMu.Lock()
		snsUserAccountAfterSelectHooks = append(snsUserAccountAfterSelectHooks, snsUserAccountHook)
		snsUserAccountAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		snsUserAccountBeforeInsertMu.Lock()
		snsUserAccountBeforeInsertHooks = append(snsUserAccountBeforeInsertHooks, snsUserAccountHook)
		snsUserAccountBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		snsUserAccountAfterInsertMu.Lock()
		snsUserAccountAfterInsertHooks = append(snsUserAccountAfterInsertHooks, snsUserAccountHook)
		snsUserAccountAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		snsUserAccountBeforeUpdateMu.Lock()
		snsUserAccountBeforeUpdateHooks = append(snsUserAccountBeforeUpdateHooks, snsUserAccountHook)
		snsUserAccountBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		snsUserAccountAfterUpdateMu.Lock()
		snsUserAccountAfterUpdateHooks = append(snsUserAccountAfterUpdateHooks, snsUserAccountHook)
		snsUserAccountAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		snsUserAccountBeforeDeleteMu.Lock()
		snsUserAccountBeforeDeleteHooks = append(snsUserAccountBeforeDeleteHooks, snsUserAccountHook)
		snsUserAccountBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		snsUserAccountAfterDeleteMu.Lock()
		snsUserAccountAfterDeleteHooks = append(snsUserAccountAfterDeleteHooks, snsUserAccountHook)
		snsUserAccountAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		snsUserAccountBeforeUpsertMu.Lock()
		snsUserAccountBeforeUpsertHooks = append(snsUserAccountBeforeUpsertHooks, snsUserAccountHook)
		snsUserAccountBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		snsUserAccountAfterUpsertMu.Lock()
		snsUserAccountAfterUpsertHooks = append(snsUserAccountAfterUpsertHooks, snsUserAccountHook)
		snsUserAccountAfterUpsertMu.Unlock()
	}
}

// One returns a single snsUserAccount record from the query.
func (q snsUserAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SNSUserAccount, error) {
	o := &SNSUserAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sns_user_account")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SNSUserAccount records from the query.
func (q snsUserAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (SNSUserAccountSlice, error) {
	var o []*SNSUserAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SNSUserAccount slice")
	}

	if len(snsUserAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SNSUserAccount records in the query.
func (q snsUserAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sns_user_account rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q snsUserAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sns_user_account exists")
	}

	return count > 0, nil
}

// SN pointed to by the foreign key.
func (o *SNSUserAccount) SN(mods ...qm.QueryMod) snQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SNSID),
	}

	queryMods = append(queryMods, mods...)

	return SNS(queryMods...)
}

// LoadSN allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (snsUserAccountL) LoadSN(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSNSUserAccount interface{}, mods queries.Applicator) error {
	var slice []*SNSUserAccount
	var object *SNSUserAccount

	if singular {
		var ok bool
		object, ok = maybeSNSUserAccount.(*SNSUserAccount)
		if !ok {
			object = new(SNSUserAccount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSNSUserAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSNSUserAccount))
			}
		}
	} else {
		s, ok := maybeSNSUserAccount.(*[]*SNSUserAccount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSNSUserAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSNSUserAccount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &snsUserAccountR{}
		}
		args[object.SNSID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &snsUserAccountR{}
			}

			args[obj.SNSID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sns`),
		qm.WhereIn(`sns.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SN")
	}

	var resultSlice []*SN
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SN")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sns")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sns")
	}

	if len(snAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SN = foreign
		if foreign.R == nil {
			foreign.R = &snR{}
		}
		foreign.R.SNSUserAccount = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SNSID == foreign.ID {
				local.R.SN = foreign
				if foreign.R == nil {
					foreign.R = &snR{}
				}
				foreign.R.SNSUserAccount = local
				break
			}
		}
	}

	return nil
}

// SetSN of the snsUserAccount to the related item.
// Sets o.R.SN to related.
// Adds o to related.R.SNSUserAccount.
func (o *SNSUserAccount) SetSN(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SN) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sns_user_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sns_id"}),
		strmangle.WhereClause("\"", "\"", 2, snsUserAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SNSID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SNSID = related.ID
	if o.R == nil {
		o.R = &snsUserAccountR{
			SN: related,
		}
	} else {
		o.R.SN = related
	}

	if related.R == nil {
		related.R = &snR{
			SNSUserAccount: o,
		}
	} else {
		related.R.SNSUserAccount = o
	}

	return nil
}

// SNSUserAccounts retrieves all the records using an executor.
func SNSUserAccounts(mods ...qm.QueryMod) snsUserAccountQuery {
	mods = append(mods, qm.From("\"sns_user_account\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sns_user_account\".*"})
	}

	return snsUserAccountQuery{q}
}

// FindSNSUserAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSNSUserAccount(ctx context.Context, exec boil.ContextExecutor, sNSID int64, selectCols ...string) (*SNSUserAccount, error) {
	snsUserAccountObj := &SNSUserAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sns_user_account\" where \"sns_id\"=$1", sel,
	)

	q := queries.Raw(query, sNSID)

	err := q.Bind(ctx, exec, snsUserAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sns_user_account")
	}

	if err = snsUserAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return snsUserAccountObj, err
	}

	return snsUserAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SNSUserAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sns_user_account provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(snsUserAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	snsUserAccountInsertCacheMut.RLock()
	cache, cached := snsUserAccountInsertCache[key]
	snsUserAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			snsUserAccountAllColumns,
			snsUserAccountColumnsWithDefault,
			snsUserAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(snsUserAccountType, snsUserAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(snsUserAccountType, snsUserAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sns_user_account\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sns_user_account\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sns_user_account")
	}

	if !cached {
		snsUserAccountInsertCacheMut.Lock()
		snsUserAccountInsertCache[key] = cache
		snsUserAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SNSUserAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SNSUserAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	snsUserAccountUpdateCacheMut.RLock()
	cache, cached := snsUserAccountUpdateCache[key]
	snsUserAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			snsUserAccountAllColumns,
			snsUserAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sns_user_account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sns_user_account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, snsUserAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(snsUserAccountType, snsUserAccountMapping, append(wl, snsUserAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sns_user_account row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sns_user_account")
	}

	if !cached {
		snsUserAccountUpdateCacheMut.Lock()
		snsUserAccountUpdateCache[key] = cache
		snsUserAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q snsUserAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sns_user_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sns_user_account")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SNSUserAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snsUserAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sns_user_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, snsUserAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in snsUserAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all snsUserAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SNSUserAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no sns_user_account provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(snsUserAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	snsUserAccountUpsertCacheMut.RLock()
	cache, cached := snsUserAccountUpsertCache[key]
	snsUserAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			snsUserAccountAllColumns,
			snsUserAccountColumnsWithDefault,
			snsUserAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			snsUserAccountAllColumns,
			snsUserAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sns_user_account, could not build update column list")
		}

		ret := strmangle.SetComplement(snsUserAccountAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(snsUserAccountPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert sns_user_account, could not build conflict column list")
			}

			conflict = make([]string, len(snsUserAccountPrimaryKeyColumns))
			copy(conflict, snsUserAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sns_user_account\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(snsUserAccountType, snsUserAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(snsUserAccountType, snsUserAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sns_user_account")
	}

	if !cached {
		snsUserAccountUpsertCacheMut.Lock()
		snsUserAccountUpsertCache[key] = cache
		snsUserAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SNSUserAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SNSUserAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SNSUserAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), snsUserAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"sns_user_account\" WHERE \"sns_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sns_user_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sns_user_account")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q snsUserAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no snsUserAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sns_user_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sns_user_account")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SNSUserAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(snsUserAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snsUserAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sns_user_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, snsUserAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from snsUserAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sns_user_account")
	}

	if len(snsUserAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SNSUserAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSNSUserAccount(ctx, exec, o.SNSID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SNSUserAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SNSUserAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snsUserAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sns_user_account\".* FROM \"sns_user_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, snsUserAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SNSUserAccountSlice")
	}

	*o = slice

	return nil
}

// SNSUserAccountExists checks if the SNSUserAccount row exists.
func SNSUserAccountExists(ctx context.Context, exec boil.ContextExecutor, sNSID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sns_user_account\" where \"sns_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sNSID)
	}
	row := exec.QueryRowContext(ctx, sql, sNSID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sns_user_account exists")
	}

	return exists, nil
}

// Exists checks if the SNSUserAccount row exists.
func (o *SNSUserAccount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SNSUserAccountExists(ctx, exec, o.SNSID)
}
