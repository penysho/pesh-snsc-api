// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SNSAPIAccount is an object representing the database table.
type SNSAPIAccount struct {
	ID           int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	APIAccountID null.String `boil:"api_account_id" json:"api_account_id,omitempty" toml:"api_account_id" yaml:"api_account_id,omitempty"`
	Version      null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	Token        null.String `boil:"token" json:"token,omitempty" toml:"token" yaml:"token,omitempty"`
	IsActive     bool        `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	SNSID        int64       `boil:"sns_id" json:"sns_id" toml:"sns_id" yaml:"sns_id"`

	R *snsAPIAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L snsAPIAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SNSAPIAccountColumns = struct {
	ID           string
	APIAccountID string
	Version      string
	Token        string
	IsActive     string
	CreatedAt    string
	UpdatedAt    string
	SNSID        string
}{
	ID:           "id",
	APIAccountID: "api_account_id",
	Version:      "version",
	Token:        "token",
	IsActive:     "is_active",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	SNSID:        "sns_id",
}

var SNSAPIAccountTableColumns = struct {
	ID           string
	APIAccountID string
	Version      string
	Token        string
	IsActive     string
	CreatedAt    string
	UpdatedAt    string
	SNSID        string
}{
	ID:           "sns_api_account.id",
	APIAccountID: "sns_api_account.api_account_id",
	Version:      "sns_api_account.version",
	Token:        "sns_api_account.token",
	IsActive:     "sns_api_account.is_active",
	CreatedAt:    "sns_api_account.created_at",
	UpdatedAt:    "sns_api_account.updated_at",
	SNSID:        "sns_api_account.sns_id",
}

// Generated where

var SNSAPIAccountWhere = struct {
	ID           whereHelperint64
	APIAccountID whereHelpernull_String
	Version      whereHelpernull_String
	Token        whereHelpernull_String
	IsActive     whereHelperbool
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	SNSID        whereHelperint64
}{
	ID:           whereHelperint64{field: "\"sns_api_account\".\"id\""},
	APIAccountID: whereHelpernull_String{field: "\"sns_api_account\".\"api_account_id\""},
	Version:      whereHelpernull_String{field: "\"sns_api_account\".\"version\""},
	Token:        whereHelpernull_String{field: "\"sns_api_account\".\"token\""},
	IsActive:     whereHelperbool{field: "\"sns_api_account\".\"is_active\""},
	CreatedAt:    whereHelpertime_Time{field: "\"sns_api_account\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"sns_api_account\".\"updated_at\""},
	SNSID:        whereHelperint64{field: "\"sns_api_account\".\"sns_id\""},
}

// SNSAPIAccountRels is where relationship names are stored.
var SNSAPIAccountRels = struct {
	SN string
}{
	SN: "SN",
}

// snsAPIAccountR is where relationships are stored.
type snsAPIAccountR struct {
	SN *SN `boil:"SN" json:"SN" toml:"SN" yaml:"SN"`
}

// NewStruct creates a new relationship struct
func (*snsAPIAccountR) NewStruct() *snsAPIAccountR {
	return &snsAPIAccountR{}
}

func (r *snsAPIAccountR) GetSN() *SN {
	if r == nil {
		return nil
	}
	return r.SN
}

// snsAPIAccountL is where Load methods for each relationship are stored.
type snsAPIAccountL struct{}

var (
	snsAPIAccountAllColumns            = []string{"id", "api_account_id", "version", "token", "is_active", "created_at", "updated_at", "sns_id"}
	snsAPIAccountColumnsWithoutDefault = []string{"is_active", "created_at", "updated_at", "sns_id"}
	snsAPIAccountColumnsWithDefault    = []string{"id", "api_account_id", "version", "token"}
	snsAPIAccountPrimaryKeyColumns     = []string{"id"}
	snsAPIAccountGeneratedColumns      = []string{}
)

type (
	// SNSAPIAccountSlice is an alias for a slice of pointers to SNSAPIAccount.
	// This should almost always be used instead of []SNSAPIAccount.
	SNSAPIAccountSlice []*SNSAPIAccount
	// SNSAPIAccountHook is the signature for custom SNSAPIAccount hook methods
	SNSAPIAccountHook func(context.Context, boil.ContextExecutor, *SNSAPIAccount) error

	snsAPIAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	snsAPIAccountType                 = reflect.TypeOf(&SNSAPIAccount{})
	snsAPIAccountMapping              = queries.MakeStructMapping(snsAPIAccountType)
	snsAPIAccountPrimaryKeyMapping, _ = queries.BindMapping(snsAPIAccountType, snsAPIAccountMapping, snsAPIAccountPrimaryKeyColumns)
	snsAPIAccountInsertCacheMut       sync.RWMutex
	snsAPIAccountInsertCache          = make(map[string]insertCache)
	snsAPIAccountUpdateCacheMut       sync.RWMutex
	snsAPIAccountUpdateCache          = make(map[string]updateCache)
	snsAPIAccountUpsertCacheMut       sync.RWMutex
	snsAPIAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var snsAPIAccountAfterSelectMu sync.Mutex
var snsAPIAccountAfterSelectHooks []SNSAPIAccountHook

var snsAPIAccountBeforeInsertMu sync.Mutex
var snsAPIAccountBeforeInsertHooks []SNSAPIAccountHook
var snsAPIAccountAfterInsertMu sync.Mutex
var snsAPIAccountAfterInsertHooks []SNSAPIAccountHook

var snsAPIAccountBeforeUpdateMu sync.Mutex
var snsAPIAccountBeforeUpdateHooks []SNSAPIAccountHook
var snsAPIAccountAfterUpdateMu sync.Mutex
var snsAPIAccountAfterUpdateHooks []SNSAPIAccountHook

var snsAPIAccountBeforeDeleteMu sync.Mutex
var snsAPIAccountBeforeDeleteHooks []SNSAPIAccountHook
var snsAPIAccountAfterDeleteMu sync.Mutex
var snsAPIAccountAfterDeleteHooks []SNSAPIAccountHook

var snsAPIAccountBeforeUpsertMu sync.Mutex
var snsAPIAccountBeforeUpsertHooks []SNSAPIAccountHook
var snsAPIAccountAfterUpsertMu sync.Mutex
var snsAPIAccountAfterUpsertHooks []SNSAPIAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SNSAPIAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsAPIAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SNSAPIAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsAPIAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SNSAPIAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsAPIAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SNSAPIAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsAPIAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SNSAPIAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsAPIAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SNSAPIAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsAPIAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SNSAPIAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsAPIAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SNSAPIAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsAPIAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SNSAPIAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snsAPIAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSNSAPIAccountHook registers your hook function for all future operations.
func AddSNSAPIAccountHook(hookPoint boil.HookPoint, snsAPIAccountHook SNSAPIAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		snsAPIAccountAfterSelectMu.Lock()
		snsAPIAccountAfterSelectHooks = append(snsAPIAccountAfterSelectHooks, snsAPIAccountHook)
		snsAPIAccountAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		snsAPIAccountBeforeInsertMu.Lock()
		snsAPIAccountBeforeInsertHooks = append(snsAPIAccountBeforeInsertHooks, snsAPIAccountHook)
		snsAPIAccountBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		snsAPIAccountAfterInsertMu.Lock()
		snsAPIAccountAfterInsertHooks = append(snsAPIAccountAfterInsertHooks, snsAPIAccountHook)
		snsAPIAccountAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		snsAPIAccountBeforeUpdateMu.Lock()
		snsAPIAccountBeforeUpdateHooks = append(snsAPIAccountBeforeUpdateHooks, snsAPIAccountHook)
		snsAPIAccountBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		snsAPIAccountAfterUpdateMu.Lock()
		snsAPIAccountAfterUpdateHooks = append(snsAPIAccountAfterUpdateHooks, snsAPIAccountHook)
		snsAPIAccountAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		snsAPIAccountBeforeDeleteMu.Lock()
		snsAPIAccountBeforeDeleteHooks = append(snsAPIAccountBeforeDeleteHooks, snsAPIAccountHook)
		snsAPIAccountBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		snsAPIAccountAfterDeleteMu.Lock()
		snsAPIAccountAfterDeleteHooks = append(snsAPIAccountAfterDeleteHooks, snsAPIAccountHook)
		snsAPIAccountAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		snsAPIAccountBeforeUpsertMu.Lock()
		snsAPIAccountBeforeUpsertHooks = append(snsAPIAccountBeforeUpsertHooks, snsAPIAccountHook)
		snsAPIAccountBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		snsAPIAccountAfterUpsertMu.Lock()
		snsAPIAccountAfterUpsertHooks = append(snsAPIAccountAfterUpsertHooks, snsAPIAccountHook)
		snsAPIAccountAfterUpsertMu.Unlock()
	}
}

// One returns a single snsAPIAccount record from the query.
func (q snsAPIAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SNSAPIAccount, error) {
	o := &SNSAPIAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sns_api_account")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SNSAPIAccount records from the query.
func (q snsAPIAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (SNSAPIAccountSlice, error) {
	var o []*SNSAPIAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SNSAPIAccount slice")
	}

	if len(snsAPIAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SNSAPIAccount records in the query.
func (q snsAPIAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sns_api_account rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q snsAPIAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sns_api_account exists")
	}

	return count > 0, nil
}

// SN pointed to by the foreign key.
func (o *SNSAPIAccount) SN(mods ...qm.QueryMod) snQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SNSID),
	}

	queryMods = append(queryMods, mods...)

	return SNS(queryMods...)
}

// LoadSN allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (snsAPIAccountL) LoadSN(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSNSAPIAccount interface{}, mods queries.Applicator) error {
	var slice []*SNSAPIAccount
	var object *SNSAPIAccount

	if singular {
		var ok bool
		object, ok = maybeSNSAPIAccount.(*SNSAPIAccount)
		if !ok {
			object = new(SNSAPIAccount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSNSAPIAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSNSAPIAccount))
			}
		}
	} else {
		s, ok := maybeSNSAPIAccount.(*[]*SNSAPIAccount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSNSAPIAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSNSAPIAccount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &snsAPIAccountR{}
		}
		args[object.SNSID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &snsAPIAccountR{}
			}

			args[obj.SNSID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sns`),
		qm.WhereIn(`sns.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SN")
	}

	var resultSlice []*SN
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SN")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sns")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sns")
	}

	if len(snAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SN = foreign
		if foreign.R == nil {
			foreign.R = &snR{}
		}
		foreign.R.SNSAPIAccounts = append(foreign.R.SNSAPIAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SNSID == foreign.ID {
				local.R.SN = foreign
				if foreign.R == nil {
					foreign.R = &snR{}
				}
				foreign.R.SNSAPIAccounts = append(foreign.R.SNSAPIAccounts, local)
				break
			}
		}
	}

	return nil
}

// SetSN of the snsAPIAccount to the related item.
// Sets o.R.SN to related.
// Adds o to related.R.SNSAPIAccounts.
func (o *SNSAPIAccount) SetSN(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SN) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sns_api_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sns_id"}),
		strmangle.WhereClause("\"", "\"", 2, snsAPIAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SNSID = related.ID
	if o.R == nil {
		o.R = &snsAPIAccountR{
			SN: related,
		}
	} else {
		o.R.SN = related
	}

	if related.R == nil {
		related.R = &snR{
			SNSAPIAccounts: SNSAPIAccountSlice{o},
		}
	} else {
		related.R.SNSAPIAccounts = append(related.R.SNSAPIAccounts, o)
	}

	return nil
}

// SNSAPIAccounts retrieves all the records using an executor.
func SNSAPIAccounts(mods ...qm.QueryMod) snsAPIAccountQuery {
	mods = append(mods, qm.From("\"sns_api_account\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sns_api_account\".*"})
	}

	return snsAPIAccountQuery{q}
}

// FindSNSAPIAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSNSAPIAccount(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SNSAPIAccount, error) {
	snsAPIAccountObj := &SNSAPIAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sns_api_account\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, snsAPIAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sns_api_account")
	}

	if err = snsAPIAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return snsAPIAccountObj, err
	}

	return snsAPIAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SNSAPIAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sns_api_account provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(snsAPIAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	snsAPIAccountInsertCacheMut.RLock()
	cache, cached := snsAPIAccountInsertCache[key]
	snsAPIAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			snsAPIAccountAllColumns,
			snsAPIAccountColumnsWithDefault,
			snsAPIAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(snsAPIAccountType, snsAPIAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(snsAPIAccountType, snsAPIAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sns_api_account\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sns_api_account\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sns_api_account")
	}

	if !cached {
		snsAPIAccountInsertCacheMut.Lock()
		snsAPIAccountInsertCache[key] = cache
		snsAPIAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SNSAPIAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SNSAPIAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	snsAPIAccountUpdateCacheMut.RLock()
	cache, cached := snsAPIAccountUpdateCache[key]
	snsAPIAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			snsAPIAccountAllColumns,
			snsAPIAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sns_api_account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sns_api_account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, snsAPIAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(snsAPIAccountType, snsAPIAccountMapping, append(wl, snsAPIAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sns_api_account row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sns_api_account")
	}

	if !cached {
		snsAPIAccountUpdateCacheMut.Lock()
		snsAPIAccountUpdateCache[key] = cache
		snsAPIAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q snsAPIAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sns_api_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sns_api_account")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SNSAPIAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snsAPIAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sns_api_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, snsAPIAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in snsAPIAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all snsAPIAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SNSAPIAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no sns_api_account provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(snsAPIAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	snsAPIAccountUpsertCacheMut.RLock()
	cache, cached := snsAPIAccountUpsertCache[key]
	snsAPIAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			snsAPIAccountAllColumns,
			snsAPIAccountColumnsWithDefault,
			snsAPIAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			snsAPIAccountAllColumns,
			snsAPIAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sns_api_account, could not build update column list")
		}

		ret := strmangle.SetComplement(snsAPIAccountAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(snsAPIAccountPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert sns_api_account, could not build conflict column list")
			}

			conflict = make([]string, len(snsAPIAccountPrimaryKeyColumns))
			copy(conflict, snsAPIAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sns_api_account\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(snsAPIAccountType, snsAPIAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(snsAPIAccountType, snsAPIAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sns_api_account")
	}

	if !cached {
		snsAPIAccountUpsertCacheMut.Lock()
		snsAPIAccountUpsertCache[key] = cache
		snsAPIAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SNSAPIAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SNSAPIAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SNSAPIAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), snsAPIAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"sns_api_account\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sns_api_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sns_api_account")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q snsAPIAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no snsAPIAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sns_api_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sns_api_account")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SNSAPIAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(snsAPIAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snsAPIAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sns_api_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, snsAPIAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from snsAPIAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sns_api_account")
	}

	if len(snsAPIAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SNSAPIAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSNSAPIAccount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SNSAPIAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SNSAPIAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snsAPIAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sns_api_account\".* FROM \"sns_api_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, snsAPIAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SNSAPIAccountSlice")
	}

	*o = slice

	return nil
}

// SNSAPIAccountExists checks if the SNSAPIAccount row exists.
func SNSAPIAccountExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sns_api_account\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sns_api_account exists")
	}

	return exists, nil
}

// Exists checks if the SNSAPIAccount row exists.
func (o *SNSAPIAccount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SNSAPIAccountExists(ctx, exec, o.ID)
}
