// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SN is an object representing the database table.
type SN struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	IsActive  bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	SiteID    int64     `boil:"site_id" json:"site_id" toml:"site_id" yaml:"site_id"`
	Type      string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Username  string    `boil:"username" json:"username" toml:"username" yaml:"username"`

	R *snR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L snL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SNColumns = struct {
	ID        string
	IsActive  string
	CreatedAt string
	UpdatedAt string
	SiteID    string
	Type      string
	Username  string
}{
	ID:        "id",
	IsActive:  "is_active",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	SiteID:    "site_id",
	Type:      "type",
	Username:  "username",
}

var SNTableColumns = struct {
	ID        string
	IsActive  string
	CreatedAt string
	UpdatedAt string
	SiteID    string
	Type      string
	Username  string
}{
	ID:        "sns.id",
	IsActive:  "sns.is_active",
	CreatedAt: "sns.created_at",
	UpdatedAt: "sns.updated_at",
	SiteID:    "sns.site_id",
	Type:      "sns.type",
	Username:  "sns.username",
}

// Generated where

var SNWhere = struct {
	ID        whereHelperint64
	IsActive  whereHelperbool
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	SiteID    whereHelperint64
	Type      whereHelperstring
	Username  whereHelperstring
}{
	ID:        whereHelperint64{field: "\"sns\".\"id\""},
	IsActive:  whereHelperbool{field: "\"sns\".\"is_active\""},
	CreatedAt: whereHelpertime_Time{field: "\"sns\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"sns\".\"updated_at\""},
	SiteID:    whereHelperint64{field: "\"sns\".\"site_id\""},
	Type:      whereHelperstring{field: "\"sns\".\"type\""},
	Username:  whereHelperstring{field: "\"sns\".\"username\""},
}

// SNRels is where relationship names are stored.
var SNRels = struct {
	Site           string
	SNSUserAccount string
	Posts          string
	SNSAPIAccounts string
}{
	Site:           "Site",
	SNSUserAccount: "SNSUserAccount",
	Posts:          "Posts",
	SNSAPIAccounts: "SNSAPIAccounts",
}

// snR is where relationships are stored.
type snR struct {
	Site           *Site              `boil:"Site" json:"Site" toml:"Site" yaml:"Site"`
	SNSUserAccount *SNSUserAccount    `boil:"SNSUserAccount" json:"SNSUserAccount" toml:"SNSUserAccount" yaml:"SNSUserAccount"`
	Posts          PostSlice          `boil:"Posts" json:"Posts" toml:"Posts" yaml:"Posts"`
	SNSAPIAccounts SNSAPIAccountSlice `boil:"SNSAPIAccounts" json:"SNSAPIAccounts" toml:"SNSAPIAccounts" yaml:"SNSAPIAccounts"`
}

// NewStruct creates a new relationship struct
func (*snR) NewStruct() *snR {
	return &snR{}
}

func (r *snR) GetSite() *Site {
	if r == nil {
		return nil
	}
	return r.Site
}

func (r *snR) GetSNSUserAccount() *SNSUserAccount {
	if r == nil {
		return nil
	}
	return r.SNSUserAccount
}

func (r *snR) GetPosts() PostSlice {
	if r == nil {
		return nil
	}
	return r.Posts
}

func (r *snR) GetSNSAPIAccounts() SNSAPIAccountSlice {
	if r == nil {
		return nil
	}
	return r.SNSAPIAccounts
}

// snL is where Load methods for each relationship are stored.
type snL struct{}

var (
	snAllColumns            = []string{"id", "is_active", "created_at", "updated_at", "site_id", "type", "username"}
	snColumnsWithoutDefault = []string{"is_active", "created_at", "updated_at", "site_id", "type", "username"}
	snColumnsWithDefault    = []string{"id"}
	snPrimaryKeyColumns     = []string{"id"}
	snGeneratedColumns      = []string{}
)

type (
	// SNSlice is an alias for a slice of pointers to SN.
	// This should almost always be used instead of []SN.
	SNSlice []*SN
	// SNHook is the signature for custom SN hook methods
	SNHook func(context.Context, boil.ContextExecutor, *SN) error

	snQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	snType                 = reflect.TypeOf(&SN{})
	snMapping              = queries.MakeStructMapping(snType)
	snPrimaryKeyMapping, _ = queries.BindMapping(snType, snMapping, snPrimaryKeyColumns)
	snInsertCacheMut       sync.RWMutex
	snInsertCache          = make(map[string]insertCache)
	snUpdateCacheMut       sync.RWMutex
	snUpdateCache          = make(map[string]updateCache)
	snUpsertCacheMut       sync.RWMutex
	snUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var snAfterSelectMu sync.Mutex
var snAfterSelectHooks []SNHook

var snBeforeInsertMu sync.Mutex
var snBeforeInsertHooks []SNHook
var snAfterInsertMu sync.Mutex
var snAfterInsertHooks []SNHook

var snBeforeUpdateMu sync.Mutex
var snBeforeUpdateHooks []SNHook
var snAfterUpdateMu sync.Mutex
var snAfterUpdateHooks []SNHook

var snBeforeDeleteMu sync.Mutex
var snBeforeDeleteHooks []SNHook
var snAfterDeleteMu sync.Mutex
var snAfterDeleteHooks []SNHook

var snBeforeUpsertMu sync.Mutex
var snBeforeUpsertHooks []SNHook
var snAfterUpsertMu sync.Mutex
var snAfterUpsertHooks []SNHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SN) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SN) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SN) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SN) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SN) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SN) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SN) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SN) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SN) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSNHook registers your hook function for all future operations.
func AddSNHook(hookPoint boil.HookPoint, snHook SNHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		snAfterSelectMu.Lock()
		snAfterSelectHooks = append(snAfterSelectHooks, snHook)
		snAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		snBeforeInsertMu.Lock()
		snBeforeInsertHooks = append(snBeforeInsertHooks, snHook)
		snBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		snAfterInsertMu.Lock()
		snAfterInsertHooks = append(snAfterInsertHooks, snHook)
		snAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		snBeforeUpdateMu.Lock()
		snBeforeUpdateHooks = append(snBeforeUpdateHooks, snHook)
		snBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		snAfterUpdateMu.Lock()
		snAfterUpdateHooks = append(snAfterUpdateHooks, snHook)
		snAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		snBeforeDeleteMu.Lock()
		snBeforeDeleteHooks = append(snBeforeDeleteHooks, snHook)
		snBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		snAfterDeleteMu.Lock()
		snAfterDeleteHooks = append(snAfterDeleteHooks, snHook)
		snAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		snBeforeUpsertMu.Lock()
		snBeforeUpsertHooks = append(snBeforeUpsertHooks, snHook)
		snBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		snAfterUpsertMu.Lock()
		snAfterUpsertHooks = append(snAfterUpsertHooks, snHook)
		snAfterUpsertMu.Unlock()
	}
}

// One returns a single sn record from the query.
func (q snQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SN, error) {
	o := &SN{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sns")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SN records from the query.
func (q snQuery) All(ctx context.Context, exec boil.ContextExecutor) (SNSlice, error) {
	var o []*SN

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SN slice")
	}

	if len(snAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SN records in the query.
func (q snQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sns rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q snQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sns exists")
	}

	return count > 0, nil
}

// Site pointed to by the foreign key.
func (o *SN) Site(mods ...qm.QueryMod) siteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SiteID),
	}

	queryMods = append(queryMods, mods...)

	return Sites(queryMods...)
}

// SNSUserAccount pointed to by the foreign key.
func (o *SN) SNSUserAccount(mods ...qm.QueryMod) snsUserAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"sns_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return SNSUserAccounts(queryMods...)
}

// Posts retrieves all the post's Posts with an executor.
func (o *SN) Posts(mods ...qm.QueryMod) postQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"post\".\"sns_id\"=?", o.ID),
	)

	return Posts(queryMods...)
}

// SNSAPIAccounts retrieves all the sns_api_account's SNSAPIAccounts with an executor.
func (o *SN) SNSAPIAccounts(mods ...qm.QueryMod) snsAPIAccountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sns_api_account\".\"sns_id\"=?", o.ID),
	)

	return SNSAPIAccounts(queryMods...)
}

// LoadSite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (snL) LoadSite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSN interface{}, mods queries.Applicator) error {
	var slice []*SN
	var object *SN

	if singular {
		var ok bool
		object, ok = maybeSN.(*SN)
		if !ok {
			object = new(SN)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSN)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSN))
			}
		}
	} else {
		s, ok := maybeSN.(*[]*SN)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSN)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSN))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &snR{}
		}
		args[object.SiteID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &snR{}
			}

			args[obj.SiteID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`site`),
		qm.WhereIn(`site.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Site")
	}

	var resultSlice []*Site
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Site")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for site")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for site")
	}

	if len(siteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Site = foreign
		if foreign.R == nil {
			foreign.R = &siteR{}
		}
		foreign.R.SNS = append(foreign.R.SNS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SiteID == foreign.ID {
				local.R.Site = foreign
				if foreign.R == nil {
					foreign.R = &siteR{}
				}
				foreign.R.SNS = append(foreign.R.SNS, local)
				break
			}
		}
	}

	return nil
}

// LoadSNSUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (snL) LoadSNSUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSN interface{}, mods queries.Applicator) error {
	var slice []*SN
	var object *SN

	if singular {
		var ok bool
		object, ok = maybeSN.(*SN)
		if !ok {
			object = new(SN)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSN)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSN))
			}
		}
	} else {
		s, ok := maybeSN.(*[]*SN)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSN)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSN))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &snR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &snR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sns_user_account`),
		qm.WhereIn(`sns_user_account.sns_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SNSUserAccount")
	}

	var resultSlice []*SNSUserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SNSUserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sns_user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sns_user_account")
	}

	if len(snsUserAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SNSUserAccount = foreign
		if foreign.R == nil {
			foreign.R = &snsUserAccountR{}
		}
		foreign.R.SN = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.SNSID {
				local.R.SNSUserAccount = foreign
				if foreign.R == nil {
					foreign.R = &snsUserAccountR{}
				}
				foreign.R.SN = local
				break
			}
		}
	}

	return nil
}

// LoadPosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (snL) LoadPosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSN interface{}, mods queries.Applicator) error {
	var slice []*SN
	var object *SN

	if singular {
		var ok bool
		object, ok = maybeSN.(*SN)
		if !ok {
			object = new(SN)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSN)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSN))
			}
		}
	} else {
		s, ok := maybeSN.(*[]*SN)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSN)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSN))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &snR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &snR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`post`),
		qm.WhereIn(`post.sns_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on post")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Posts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postR{}
			}
			foreign.R.SN = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SNSID {
				local.R.Posts = append(local.R.Posts, foreign)
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.SN = local
				break
			}
		}
	}

	return nil
}

// LoadSNSAPIAccounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (snL) LoadSNSAPIAccounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSN interface{}, mods queries.Applicator) error {
	var slice []*SN
	var object *SN

	if singular {
		var ok bool
		object, ok = maybeSN.(*SN)
		if !ok {
			object = new(SN)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSN)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSN))
			}
		}
	} else {
		s, ok := maybeSN.(*[]*SN)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSN)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSN))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &snR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &snR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sns_api_account`),
		qm.WhereIn(`sns_api_account.sns_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sns_api_account")
	}

	var resultSlice []*SNSAPIAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sns_api_account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sns_api_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sns_api_account")
	}

	if len(snsAPIAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SNSAPIAccounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &snsAPIAccountR{}
			}
			foreign.R.SN = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SNSID {
				local.R.SNSAPIAccounts = append(local.R.SNSAPIAccounts, foreign)
				if foreign.R == nil {
					foreign.R = &snsAPIAccountR{}
				}
				foreign.R.SN = local
				break
			}
		}
	}

	return nil
}

// SetSite of the sn to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.SNS.
func (o *SN) SetSite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Site) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sns\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"site_id"}),
		strmangle.WhereClause("\"", "\"", 2, snPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SiteID = related.ID
	if o.R == nil {
		o.R = &snR{
			Site: related,
		}
	} else {
		o.R.Site = related
	}

	if related.R == nil {
		related.R = &siteR{
			SNS: SNSlice{o},
		}
	} else {
		related.R.SNS = append(related.R.SNS, o)
	}

	return nil
}

// SetSNSUserAccount of the sn to the related item.
// Sets o.R.SNSUserAccount to related.
// Adds o to related.R.SN.
func (o *SN) SetSNSUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SNSUserAccount) error {
	var err error

	if insert {
		related.SNSID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"sns_user_account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"sns_id"}),
			strmangle.WhereClause("\"", "\"", 2, snsUserAccountPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.SNSID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.SNSID = o.ID
	}

	if o.R == nil {
		o.R = &snR{
			SNSUserAccount: related,
		}
	} else {
		o.R.SNSUserAccount = related
	}

	if related.R == nil {
		related.R = &snsUserAccountR{
			SN: o,
		}
	} else {
		related.R.SN = o
	}
	return nil
}

// AddPosts adds the given related objects to the existing relationships
// of the sn, optionally inserting them as new records.
// Appends related to o.R.Posts.
// Sets related.R.SN appropriately.
func (o *SN) AddPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SNSID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"post\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sns_id"}),
				strmangle.WhereClause("\"", "\"", 2, postPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SNSID = o.ID
		}
	}

	if o.R == nil {
		o.R = &snR{
			Posts: related,
		}
	} else {
		o.R.Posts = append(o.R.Posts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postR{
				SN: o,
			}
		} else {
			rel.R.SN = o
		}
	}
	return nil
}

// AddSNSAPIAccounts adds the given related objects to the existing relationships
// of the sn, optionally inserting them as new records.
// Appends related to o.R.SNSAPIAccounts.
// Sets related.R.SN appropriately.
func (o *SN) AddSNSAPIAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SNSAPIAccount) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SNSID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sns_api_account\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sns_id"}),
				strmangle.WhereClause("\"", "\"", 2, snsAPIAccountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SNSID = o.ID
		}
	}

	if o.R == nil {
		o.R = &snR{
			SNSAPIAccounts: related,
		}
	} else {
		o.R.SNSAPIAccounts = append(o.R.SNSAPIAccounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &snsAPIAccountR{
				SN: o,
			}
		} else {
			rel.R.SN = o
		}
	}
	return nil
}

// SNS retrieves all the records using an executor.
func SNS(mods ...qm.QueryMod) snQuery {
	mods = append(mods, qm.From("\"sns\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sns\".*"})
	}

	return snQuery{q}
}

// FindSN retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSN(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SN, error) {
	snObj := &SN{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sns\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, snObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sns")
	}

	if err = snObj.doAfterSelectHooks(ctx, exec); err != nil {
		return snObj, err
	}

	return snObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SN) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sns provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(snColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	snInsertCacheMut.RLock()
	cache, cached := snInsertCache[key]
	snInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			snAllColumns,
			snColumnsWithDefault,
			snColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(snType, snMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(snType, snMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sns\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sns\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sns")
	}

	if !cached {
		snInsertCacheMut.Lock()
		snInsertCache[key] = cache
		snInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SN.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SN) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	snUpdateCacheMut.RLock()
	cache, cached := snUpdateCache[key]
	snUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			snAllColumns,
			snPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sns, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sns\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, snPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(snType, snMapping, append(wl, snPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sns row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sns")
	}

	if !cached {
		snUpdateCacheMut.Lock()
		snUpdateCache[key] = cache
		snUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q snQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sns")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SNSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sns\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, snPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sn")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SN) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no sns provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(snColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	snUpsertCacheMut.RLock()
	cache, cached := snUpsertCache[key]
	snUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			snAllColumns,
			snColumnsWithDefault,
			snColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			snAllColumns,
			snPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sns, could not build update column list")
		}

		ret := strmangle.SetComplement(snAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(snPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert sns, could not build conflict column list")
			}

			conflict = make([]string, len(snPrimaryKeyColumns))
			copy(conflict, snPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sns\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(snType, snMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(snType, snMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sns")
	}

	if !cached {
		snUpsertCacheMut.Lock()
		snUpsertCache[key] = cache
		snUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SN record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SN) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SN provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), snPrimaryKeyMapping)
	sql := "DELETE FROM \"sns\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sns")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q snQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no snQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sns")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SNSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(snBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sns\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, snPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sns")
	}

	if len(snAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SN) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSN(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SNSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SNSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sns\".* FROM \"sns\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, snPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SNSlice")
	}

	*o = slice

	return nil
}

// SNExists checks if the SN row exists.
func SNExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sns\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sns exists")
	}

	return exists, nil
}

// Exists checks if the SN row exists.
func (o *SN) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SNExists(ctx, exec, o.ID)
}
