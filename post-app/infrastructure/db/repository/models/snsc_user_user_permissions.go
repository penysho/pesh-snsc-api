// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SNSCUserUserPermission is an object representing the database table.
type SNSCUserUserPermission struct {
	ID           int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	SnscuserID   int64 `boil:"snscuser_id" json:"snscuser_id" toml:"snscuser_id" yaml:"snscuser_id"`
	PermissionID int   `boil:"permission_id" json:"permission_id" toml:"permission_id" yaml:"permission_id"`

	R *snscUserUserPermissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L snscUserUserPermissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SNSCUserUserPermissionColumns = struct {
	ID           string
	SnscuserID   string
	PermissionID string
}{
	ID:           "id",
	SnscuserID:   "snscuser_id",
	PermissionID: "permission_id",
}

var SNSCUserUserPermissionTableColumns = struct {
	ID           string
	SnscuserID   string
	PermissionID string
}{
	ID:           "snsc_user_user_permissions.id",
	SnscuserID:   "snsc_user_user_permissions.snscuser_id",
	PermissionID: "snsc_user_user_permissions.permission_id",
}

// Generated where

var SNSCUserUserPermissionWhere = struct {
	ID           whereHelperint64
	SnscuserID   whereHelperint64
	PermissionID whereHelperint
}{
	ID:           whereHelperint64{field: "\"snsc_user_user_permissions\".\"id\""},
	SnscuserID:   whereHelperint64{field: "\"snsc_user_user_permissions\".\"snscuser_id\""},
	PermissionID: whereHelperint{field: "\"snsc_user_user_permissions\".\"permission_id\""},
}

// SNSCUserUserPermissionRels is where relationship names are stored.
var SNSCUserUserPermissionRels = struct {
	Snscuser string
}{
	Snscuser: "Snscuser",
}

// snscUserUserPermissionR is where relationships are stored.
type snscUserUserPermissionR struct {
	Snscuser *SNSCUser `boil:"Snscuser" json:"Snscuser" toml:"Snscuser" yaml:"Snscuser"`
}

// NewStruct creates a new relationship struct
func (*snscUserUserPermissionR) NewStruct() *snscUserUserPermissionR {
	return &snscUserUserPermissionR{}
}

func (r *snscUserUserPermissionR) GetSnscuser() *SNSCUser {
	if r == nil {
		return nil
	}
	return r.Snscuser
}

// snscUserUserPermissionL is where Load methods for each relationship are stored.
type snscUserUserPermissionL struct{}

var (
	snscUserUserPermissionAllColumns            = []string{"id", "snscuser_id", "permission_id"}
	snscUserUserPermissionColumnsWithoutDefault = []string{"snscuser_id", "permission_id"}
	snscUserUserPermissionColumnsWithDefault    = []string{"id"}
	snscUserUserPermissionPrimaryKeyColumns     = []string{"id"}
	snscUserUserPermissionGeneratedColumns      = []string{}
)

type (
	// SNSCUserUserPermissionSlice is an alias for a slice of pointers to SNSCUserUserPermission.
	// This should almost always be used instead of []SNSCUserUserPermission.
	SNSCUserUserPermissionSlice []*SNSCUserUserPermission
	// SNSCUserUserPermissionHook is the signature for custom SNSCUserUserPermission hook methods
	SNSCUserUserPermissionHook func(context.Context, boil.ContextExecutor, *SNSCUserUserPermission) error

	snscUserUserPermissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	snscUserUserPermissionType                 = reflect.TypeOf(&SNSCUserUserPermission{})
	snscUserUserPermissionMapping              = queries.MakeStructMapping(snscUserUserPermissionType)
	snscUserUserPermissionPrimaryKeyMapping, _ = queries.BindMapping(snscUserUserPermissionType, snscUserUserPermissionMapping, snscUserUserPermissionPrimaryKeyColumns)
	snscUserUserPermissionInsertCacheMut       sync.RWMutex
	snscUserUserPermissionInsertCache          = make(map[string]insertCache)
	snscUserUserPermissionUpdateCacheMut       sync.RWMutex
	snscUserUserPermissionUpdateCache          = make(map[string]updateCache)
	snscUserUserPermissionUpsertCacheMut       sync.RWMutex
	snscUserUserPermissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var snscUserUserPermissionAfterSelectMu sync.Mutex
var snscUserUserPermissionAfterSelectHooks []SNSCUserUserPermissionHook

var snscUserUserPermissionBeforeInsertMu sync.Mutex
var snscUserUserPermissionBeforeInsertHooks []SNSCUserUserPermissionHook
var snscUserUserPermissionAfterInsertMu sync.Mutex
var snscUserUserPermissionAfterInsertHooks []SNSCUserUserPermissionHook

var snscUserUserPermissionBeforeUpdateMu sync.Mutex
var snscUserUserPermissionBeforeUpdateHooks []SNSCUserUserPermissionHook
var snscUserUserPermissionAfterUpdateMu sync.Mutex
var snscUserUserPermissionAfterUpdateHooks []SNSCUserUserPermissionHook

var snscUserUserPermissionBeforeDeleteMu sync.Mutex
var snscUserUserPermissionBeforeDeleteHooks []SNSCUserUserPermissionHook
var snscUserUserPermissionAfterDeleteMu sync.Mutex
var snscUserUserPermissionAfterDeleteHooks []SNSCUserUserPermissionHook

var snscUserUserPermissionBeforeUpsertMu sync.Mutex
var snscUserUserPermissionBeforeUpsertHooks []SNSCUserUserPermissionHook
var snscUserUserPermissionAfterUpsertMu sync.Mutex
var snscUserUserPermissionAfterUpsertHooks []SNSCUserUserPermissionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SNSCUserUserPermission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserUserPermissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SNSCUserUserPermission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserUserPermissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SNSCUserUserPermission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserUserPermissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SNSCUserUserPermission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserUserPermissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SNSCUserUserPermission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserUserPermissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SNSCUserUserPermission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserUserPermissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SNSCUserUserPermission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserUserPermissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SNSCUserUserPermission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserUserPermissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SNSCUserUserPermission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserUserPermissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSNSCUserUserPermissionHook registers your hook function for all future operations.
func AddSNSCUserUserPermissionHook(hookPoint boil.HookPoint, snscUserUserPermissionHook SNSCUserUserPermissionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		snscUserUserPermissionAfterSelectMu.Lock()
		snscUserUserPermissionAfterSelectHooks = append(snscUserUserPermissionAfterSelectHooks, snscUserUserPermissionHook)
		snscUserUserPermissionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		snscUserUserPermissionBeforeInsertMu.Lock()
		snscUserUserPermissionBeforeInsertHooks = append(snscUserUserPermissionBeforeInsertHooks, snscUserUserPermissionHook)
		snscUserUserPermissionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		snscUserUserPermissionAfterInsertMu.Lock()
		snscUserUserPermissionAfterInsertHooks = append(snscUserUserPermissionAfterInsertHooks, snscUserUserPermissionHook)
		snscUserUserPermissionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		snscUserUserPermissionBeforeUpdateMu.Lock()
		snscUserUserPermissionBeforeUpdateHooks = append(snscUserUserPermissionBeforeUpdateHooks, snscUserUserPermissionHook)
		snscUserUserPermissionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		snscUserUserPermissionAfterUpdateMu.Lock()
		snscUserUserPermissionAfterUpdateHooks = append(snscUserUserPermissionAfterUpdateHooks, snscUserUserPermissionHook)
		snscUserUserPermissionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		snscUserUserPermissionBeforeDeleteMu.Lock()
		snscUserUserPermissionBeforeDeleteHooks = append(snscUserUserPermissionBeforeDeleteHooks, snscUserUserPermissionHook)
		snscUserUserPermissionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		snscUserUserPermissionAfterDeleteMu.Lock()
		snscUserUserPermissionAfterDeleteHooks = append(snscUserUserPermissionAfterDeleteHooks, snscUserUserPermissionHook)
		snscUserUserPermissionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		snscUserUserPermissionBeforeUpsertMu.Lock()
		snscUserUserPermissionBeforeUpsertHooks = append(snscUserUserPermissionBeforeUpsertHooks, snscUserUserPermissionHook)
		snscUserUserPermissionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		snscUserUserPermissionAfterUpsertMu.Lock()
		snscUserUserPermissionAfterUpsertHooks = append(snscUserUserPermissionAfterUpsertHooks, snscUserUserPermissionHook)
		snscUserUserPermissionAfterUpsertMu.Unlock()
	}
}

// One returns a single snscUserUserPermission record from the query.
func (q snscUserUserPermissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SNSCUserUserPermission, error) {
	o := &SNSCUserUserPermission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for snsc_user_user_permissions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SNSCUserUserPermission records from the query.
func (q snscUserUserPermissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (SNSCUserUserPermissionSlice, error) {
	var o []*SNSCUserUserPermission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SNSCUserUserPermission slice")
	}

	if len(snscUserUserPermissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SNSCUserUserPermission records in the query.
func (q snscUserUserPermissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count snsc_user_user_permissions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q snscUserUserPermissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if snsc_user_user_permissions exists")
	}

	return count > 0, nil
}

// Snscuser pointed to by the foreign key.
func (o *SNSCUserUserPermission) Snscuser(mods ...qm.QueryMod) snscUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SnscuserID),
	}

	queryMods = append(queryMods, mods...)

	return SNSCUsers(queryMods...)
}

// LoadSnscuser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (snscUserUserPermissionL) LoadSnscuser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSNSCUserUserPermission interface{}, mods queries.Applicator) error {
	var slice []*SNSCUserUserPermission
	var object *SNSCUserUserPermission

	if singular {
		var ok bool
		object, ok = maybeSNSCUserUserPermission.(*SNSCUserUserPermission)
		if !ok {
			object = new(SNSCUserUserPermission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSNSCUserUserPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSNSCUserUserPermission))
			}
		}
	} else {
		s, ok := maybeSNSCUserUserPermission.(*[]*SNSCUserUserPermission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSNSCUserUserPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSNSCUserUserPermission))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &snscUserUserPermissionR{}
		}
		args[object.SnscuserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &snscUserUserPermissionR{}
			}

			args[obj.SnscuserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`snsc_user`),
		qm.WhereIn(`snsc_user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SNSCUser")
	}

	var resultSlice []*SNSCUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SNSCUser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for snsc_user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for snsc_user")
	}

	if len(snscUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Snscuser = foreign
		if foreign.R == nil {
			foreign.R = &snscUserR{}
		}
		foreign.R.SnscuserSNSCUserUserPermissions = append(foreign.R.SnscuserSNSCUserUserPermissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SnscuserID == foreign.ID {
				local.R.Snscuser = foreign
				if foreign.R == nil {
					foreign.R = &snscUserR{}
				}
				foreign.R.SnscuserSNSCUserUserPermissions = append(foreign.R.SnscuserSNSCUserUserPermissions, local)
				break
			}
		}
	}

	return nil
}

// SetSnscuser of the snscUserUserPermission to the related item.
// Sets o.R.Snscuser to related.
// Adds o to related.R.SnscuserSNSCUserUserPermissions.
func (o *SNSCUserUserPermission) SetSnscuser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SNSCUser) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"snsc_user_user_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"snscuser_id"}),
		strmangle.WhereClause("\"", "\"", 2, snscUserUserPermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SnscuserID = related.ID
	if o.R == nil {
		o.R = &snscUserUserPermissionR{
			Snscuser: related,
		}
	} else {
		o.R.Snscuser = related
	}

	if related.R == nil {
		related.R = &snscUserR{
			SnscuserSNSCUserUserPermissions: SNSCUserUserPermissionSlice{o},
		}
	} else {
		related.R.SnscuserSNSCUserUserPermissions = append(related.R.SnscuserSNSCUserUserPermissions, o)
	}

	return nil
}

// SNSCUserUserPermissions retrieves all the records using an executor.
func SNSCUserUserPermissions(mods ...qm.QueryMod) snscUserUserPermissionQuery {
	mods = append(mods, qm.From("\"snsc_user_user_permissions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"snsc_user_user_permissions\".*"})
	}

	return snscUserUserPermissionQuery{q}
}

// FindSNSCUserUserPermission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSNSCUserUserPermission(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SNSCUserUserPermission, error) {
	snscUserUserPermissionObj := &SNSCUserUserPermission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"snsc_user_user_permissions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, snscUserUserPermissionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from snsc_user_user_permissions")
	}

	if err = snscUserUserPermissionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return snscUserUserPermissionObj, err
	}

	return snscUserUserPermissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SNSCUserUserPermission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no snsc_user_user_permissions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(snscUserUserPermissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	snscUserUserPermissionInsertCacheMut.RLock()
	cache, cached := snscUserUserPermissionInsertCache[key]
	snscUserUserPermissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			snscUserUserPermissionAllColumns,
			snscUserUserPermissionColumnsWithDefault,
			snscUserUserPermissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(snscUserUserPermissionType, snscUserUserPermissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(snscUserUserPermissionType, snscUserUserPermissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"snsc_user_user_permissions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"snsc_user_user_permissions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into snsc_user_user_permissions")
	}

	if !cached {
		snscUserUserPermissionInsertCacheMut.Lock()
		snscUserUserPermissionInsertCache[key] = cache
		snscUserUserPermissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SNSCUserUserPermission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SNSCUserUserPermission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	snscUserUserPermissionUpdateCacheMut.RLock()
	cache, cached := snscUserUserPermissionUpdateCache[key]
	snscUserUserPermissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			snscUserUserPermissionAllColumns,
			snscUserUserPermissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update snsc_user_user_permissions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"snsc_user_user_permissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, snscUserUserPermissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(snscUserUserPermissionType, snscUserUserPermissionMapping, append(wl, snscUserUserPermissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update snsc_user_user_permissions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for snsc_user_user_permissions")
	}

	if !cached {
		snscUserUserPermissionUpdateCacheMut.Lock()
		snscUserUserPermissionUpdateCache[key] = cache
		snscUserUserPermissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q snscUserUserPermissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for snsc_user_user_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for snsc_user_user_permissions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SNSCUserUserPermissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snscUserUserPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"snsc_user_user_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, snscUserUserPermissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in snscUserUserPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all snscUserUserPermission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SNSCUserUserPermission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no snsc_user_user_permissions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(snscUserUserPermissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	snscUserUserPermissionUpsertCacheMut.RLock()
	cache, cached := snscUserUserPermissionUpsertCache[key]
	snscUserUserPermissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			snscUserUserPermissionAllColumns,
			snscUserUserPermissionColumnsWithDefault,
			snscUserUserPermissionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			snscUserUserPermissionAllColumns,
			snscUserUserPermissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert snsc_user_user_permissions, could not build update column list")
		}

		ret := strmangle.SetComplement(snscUserUserPermissionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(snscUserUserPermissionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert snsc_user_user_permissions, could not build conflict column list")
			}

			conflict = make([]string, len(snscUserUserPermissionPrimaryKeyColumns))
			copy(conflict, snscUserUserPermissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"snsc_user_user_permissions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(snscUserUserPermissionType, snscUserUserPermissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(snscUserUserPermissionType, snscUserUserPermissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert snsc_user_user_permissions")
	}

	if !cached {
		snscUserUserPermissionUpsertCacheMut.Lock()
		snscUserUserPermissionUpsertCache[key] = cache
		snscUserUserPermissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SNSCUserUserPermission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SNSCUserUserPermission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SNSCUserUserPermission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), snscUserUserPermissionPrimaryKeyMapping)
	sql := "DELETE FROM \"snsc_user_user_permissions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from snsc_user_user_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for snsc_user_user_permissions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q snscUserUserPermissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no snscUserUserPermissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from snsc_user_user_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for snsc_user_user_permissions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SNSCUserUserPermissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(snscUserUserPermissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snscUserUserPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"snsc_user_user_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, snscUserUserPermissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from snscUserUserPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for snsc_user_user_permissions")
	}

	if len(snscUserUserPermissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SNSCUserUserPermission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSNSCUserUserPermission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SNSCUserUserPermissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SNSCUserUserPermissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snscUserUserPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"snsc_user_user_permissions\".* FROM \"snsc_user_user_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, snscUserUserPermissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SNSCUserUserPermissionSlice")
	}

	*o = slice

	return nil
}

// SNSCUserUserPermissionExists checks if the SNSCUserUserPermission row exists.
func SNSCUserUserPermissionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"snsc_user_user_permissions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if snsc_user_user_permissions exists")
	}

	return exists, nil
}

// Exists checks if the SNSCUserUserPermission row exists.
func (o *SNSCUserUserPermission) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SNSCUserUserPermissionExists(ctx, exec, o.ID)
}
