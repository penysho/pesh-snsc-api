// Code generated by MockGen. DO NOT EDIT.
// Source: interact_provider_interface.go
//
// Generated by this command:
//
//	mockgen -source=interact_provider_interface.go -destination=mock/interact_provider_interface_mock.go -package=controller_mock
//

// Package controller_mock is a generated GoMock package.
package controller_mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	interactor "github.com/penysho/pesh-snsc-api/post-app/usecase/interactor/post"
	gomock "go.uber.org/mock/gomock"
)

// MockInteractProvider is a mock of InteractProvider interface.
type MockInteractProvider struct {
	ctrl     *gomock.Controller
	recorder *MockInteractProviderMockRecorder
}

// MockInteractProviderMockRecorder is the mock recorder for MockInteractProvider.
type MockInteractProviderMockRecorder struct {
	mock *MockInteractProvider
}

// NewMockInteractProvider creates a new mock instance.
func NewMockInteractProvider(ctrl *gomock.Controller) *MockInteractProvider {
	mock := &MockInteractProvider{ctrl: ctrl}
	mock.recorder = &MockInteractProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractProvider) EXPECT() *MockInteractProviderMockRecorder {
	return m.recorder
}

// ProvidePostInteractor mocks base method.
func (m *MockInteractProvider) ProvidePostInteractor(c *gin.Context) interactor.PostInteractor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvidePostInteractor", c)
	ret0, _ := ret[0].(interactor.PostInteractor)
	return ret0
}

// ProvidePostInteractor indicates an expected call of ProvidePostInteractor.
func (mr *MockInteractProviderMockRecorder) ProvidePostInteractor(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvidePostInteractor", reflect.TypeOf((*MockInteractProvider)(nil).ProvidePostInteractor), c)
}
