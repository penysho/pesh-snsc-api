// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PostProduct is an object representing the database table.
type PostProduct struct {
	IsActive  bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	PageURL   string    `boil:"page_url" json:"page_url" toml:"page_url" yaml:"page_url"`
	ImageURL  string    `boil:"image_url" json:"image_url" toml:"image_url" yaml:"image_url"`
	ListOrder int16     `boil:"list_order" json:"list_order" toml:"list_order" yaml:"list_order"`

	R *postProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostProductColumns = struct {
	IsActive  string
	CreatedAt string
	UpdatedAt string
	ID        string
	Name      string
	PageURL   string
	ImageURL  string
	ListOrder string
}{
	IsActive:  "is_active",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	ID:        "id",
	Name:      "name",
	PageURL:   "page_url",
	ImageURL:  "image_url",
	ListOrder: "list_order",
}

var PostProductTableColumns = struct {
	IsActive  string
	CreatedAt string
	UpdatedAt string
	ID        string
	Name      string
	PageURL   string
	ImageURL  string
	ListOrder string
}{
	IsActive:  "post_product.is_active",
	CreatedAt: "post_product.created_at",
	UpdatedAt: "post_product.updated_at",
	ID:        "post_product.id",
	Name:      "post_product.name",
	PageURL:   "post_product.page_url",
	ImageURL:  "post_product.image_url",
	ListOrder: "post_product.list_order",
}

// Generated where

var PostProductWhere = struct {
	IsActive  whereHelperbool
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	ID        whereHelperint64
	Name      whereHelperstring
	PageURL   whereHelperstring
	ImageURL  whereHelperstring
	ListOrder whereHelperint16
}{
	IsActive:  whereHelperbool{field: "\"post_product\".\"is_active\""},
	CreatedAt: whereHelpertime_Time{field: "\"post_product\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"post_product\".\"updated_at\""},
	ID:        whereHelperint64{field: "\"post_product\".\"id\""},
	Name:      whereHelperstring{field: "\"post_product\".\"name\""},
	PageURL:   whereHelperstring{field: "\"post_product\".\"page_url\""},
	ImageURL:  whereHelperstring{field: "\"post_product\".\"image_url\""},
	ListOrder: whereHelperint16{field: "\"post_product\".\"list_order\""},
}

// PostProductRels is where relationship names are stored.
var PostProductRels = struct {
	PostProductRelationships string
}{
	PostProductRelationships: "PostProductRelationships",
}

// postProductR is where relationships are stored.
type postProductR struct {
	PostProductRelationships PostProductRelationshipSlice `boil:"PostProductRelationships" json:"PostProductRelationships" toml:"PostProductRelationships" yaml:"PostProductRelationships"`
}

// NewStruct creates a new relationship struct
func (*postProductR) NewStruct() *postProductR {
	return &postProductR{}
}

func (r *postProductR) GetPostProductRelationships() PostProductRelationshipSlice {
	if r == nil {
		return nil
	}
	return r.PostProductRelationships
}

// postProductL is where Load methods for each relationship are stored.
type postProductL struct{}

var (
	postProductAllColumns            = []string{"is_active", "created_at", "updated_at", "id", "name", "page_url", "image_url", "list_order"}
	postProductColumnsWithoutDefault = []string{"is_active", "created_at", "updated_at", "name", "page_url", "image_url", "list_order"}
	postProductColumnsWithDefault    = []string{"id"}
	postProductPrimaryKeyColumns     = []string{"id"}
	postProductGeneratedColumns      = []string{}
)

type (
	// PostProductSlice is an alias for a slice of pointers to PostProduct.
	// This should almost always be used instead of []PostProduct.
	PostProductSlice []*PostProduct
	// PostProductHook is the signature for custom PostProduct hook methods
	PostProductHook func(context.Context, boil.ContextExecutor, *PostProduct) error

	postProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postProductType                 = reflect.TypeOf(&PostProduct{})
	postProductMapping              = queries.MakeStructMapping(postProductType)
	postProductPrimaryKeyMapping, _ = queries.BindMapping(postProductType, postProductMapping, postProductPrimaryKeyColumns)
	postProductInsertCacheMut       sync.RWMutex
	postProductInsertCache          = make(map[string]insertCache)
	postProductUpdateCacheMut       sync.RWMutex
	postProductUpdateCache          = make(map[string]updateCache)
	postProductUpsertCacheMut       sync.RWMutex
	postProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var postProductAfterSelectMu sync.Mutex
var postProductAfterSelectHooks []PostProductHook

var postProductBeforeInsertMu sync.Mutex
var postProductBeforeInsertHooks []PostProductHook
var postProductAfterInsertMu sync.Mutex
var postProductAfterInsertHooks []PostProductHook

var postProductBeforeUpdateMu sync.Mutex
var postProductBeforeUpdateHooks []PostProductHook
var postProductAfterUpdateMu sync.Mutex
var postProductAfterUpdateHooks []PostProductHook

var postProductBeforeDeleteMu sync.Mutex
var postProductBeforeDeleteHooks []PostProductHook
var postProductAfterDeleteMu sync.Mutex
var postProductAfterDeleteHooks []PostProductHook

var postProductBeforeUpsertMu sync.Mutex
var postProductBeforeUpsertHooks []PostProductHook
var postProductAfterUpsertMu sync.Mutex
var postProductAfterUpsertHooks []PostProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PostProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PostProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PostProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PostProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PostProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PostProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PostProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PostProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PostProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPostProductHook registers your hook function for all future operations.
func AddPostProductHook(hookPoint boil.HookPoint, postProductHook PostProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		postProductAfterSelectMu.Lock()
		postProductAfterSelectHooks = append(postProductAfterSelectHooks, postProductHook)
		postProductAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		postProductBeforeInsertMu.Lock()
		postProductBeforeInsertHooks = append(postProductBeforeInsertHooks, postProductHook)
		postProductBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		postProductAfterInsertMu.Lock()
		postProductAfterInsertHooks = append(postProductAfterInsertHooks, postProductHook)
		postProductAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		postProductBeforeUpdateMu.Lock()
		postProductBeforeUpdateHooks = append(postProductBeforeUpdateHooks, postProductHook)
		postProductBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		postProductAfterUpdateMu.Lock()
		postProductAfterUpdateHooks = append(postProductAfterUpdateHooks, postProductHook)
		postProductAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		postProductBeforeDeleteMu.Lock()
		postProductBeforeDeleteHooks = append(postProductBeforeDeleteHooks, postProductHook)
		postProductBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		postProductAfterDeleteMu.Lock()
		postProductAfterDeleteHooks = append(postProductAfterDeleteHooks, postProductHook)
		postProductAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		postProductBeforeUpsertMu.Lock()
		postProductBeforeUpsertHooks = append(postProductBeforeUpsertHooks, postProductHook)
		postProductBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		postProductAfterUpsertMu.Lock()
		postProductAfterUpsertHooks = append(postProductAfterUpsertHooks, postProductHook)
		postProductAfterUpsertMu.Unlock()
	}
}

// One returns a single postProduct record from the query.
func (q postProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PostProduct, error) {
	o := &PostProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for post_product")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PostProduct records from the query.
func (q postProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostProductSlice, error) {
	var o []*PostProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PostProduct slice")
	}

	if len(postProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PostProduct records in the query.
func (q postProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count post_product rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q postProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if post_product exists")
	}

	return count > 0, nil
}

// PostProductRelationships retrieves all the post_product_relationship's PostProductRelationships with an executor.
func (o *PostProduct) PostProductRelationships(mods ...qm.QueryMod) postProductRelationshipQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"post_product_relationship\".\"post_product_id\"=?", o.ID),
	)

	return PostProductRelationships(queryMods...)
}

// LoadPostProductRelationships allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (postProductL) LoadPostProductRelationships(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostProduct interface{}, mods queries.Applicator) error {
	var slice []*PostProduct
	var object *PostProduct

	if singular {
		var ok bool
		object, ok = maybePostProduct.(*PostProduct)
		if !ok {
			object = new(PostProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostProduct))
			}
		}
	} else {
		s, ok := maybePostProduct.(*[]*PostProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostProduct))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &postProductR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postProductR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`post_product_relationship`),
		qm.WhereIn(`post_product_relationship.post_product_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load post_product_relationship")
	}

	var resultSlice []*PostProductRelationship
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice post_product_relationship")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on post_product_relationship")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post_product_relationship")
	}

	if len(postProductRelationshipAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PostProductRelationships = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postProductRelationshipR{}
			}
			foreign.R.PostProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PostProductID {
				local.R.PostProductRelationships = append(local.R.PostProductRelationships, foreign)
				if foreign.R == nil {
					foreign.R = &postProductRelationshipR{}
				}
				foreign.R.PostProduct = local
				break
			}
		}
	}

	return nil
}

// AddPostProductRelationships adds the given related objects to the existing relationships
// of the post_product, optionally inserting them as new records.
// Appends related to o.R.PostProductRelationships.
// Sets related.R.PostProduct appropriately.
func (o *PostProduct) AddPostProductRelationships(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PostProductRelationship) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PostProductID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"post_product_relationship\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"post_product_id"}),
				strmangle.WhereClause("\"", "\"", 2, postProductRelationshipPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PostProductID = o.ID
		}
	}

	if o.R == nil {
		o.R = &postProductR{
			PostProductRelationships: related,
		}
	} else {
		o.R.PostProductRelationships = append(o.R.PostProductRelationships, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postProductRelationshipR{
				PostProduct: o,
			}
		} else {
			rel.R.PostProduct = o
		}
	}
	return nil
}

// PostProducts retrieves all the records using an executor.
func PostProducts(mods ...qm.QueryMod) postProductQuery {
	mods = append(mods, qm.From("\"post_product\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"post_product\".*"})
	}

	return postProductQuery{q}
}

// FindPostProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostProduct(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PostProduct, error) {
	postProductObj := &PostProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"post_product\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, postProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from post_product")
	}

	if err = postProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return postProductObj, err
	}

	return postProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PostProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no post_product provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postProductInsertCacheMut.RLock()
	cache, cached := postProductInsertCache[key]
	postProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postProductAllColumns,
			postProductColumnsWithDefault,
			postProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postProductType, postProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postProductType, postProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"post_product\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"post_product\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into post_product")
	}

	if !cached {
		postProductInsertCacheMut.Lock()
		postProductInsertCache[key] = cache
		postProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PostProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PostProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	postProductUpdateCacheMut.RLock()
	cache, cached := postProductUpdateCache[key]
	postProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postProductAllColumns,
			postProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update post_product, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"post_product\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, postProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postProductType, postProductMapping, append(wl, postProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update post_product row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for post_product")
	}

	if !cached {
		postProductUpdateCacheMut.Lock()
		postProductUpdateCache[key] = cache
		postProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q postProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for post_product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for post_product")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"post_product\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, postProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in postProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all postProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PostProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no post_product provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postProductUpsertCacheMut.RLock()
	cache, cached := postProductUpsertCache[key]
	postProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			postProductAllColumns,
			postProductColumnsWithDefault,
			postProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			postProductAllColumns,
			postProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert post_product, could not build update column list")
		}

		ret := strmangle.SetComplement(postProductAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(postProductPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert post_product, could not build conflict column list")
			}

			conflict = make([]string, len(postProductPrimaryKeyColumns))
			copy(conflict, postProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"post_product\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(postProductType, postProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postProductType, postProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert post_product")
	}

	if !cached {
		postProductUpsertCacheMut.Lock()
		postProductUpsertCache[key] = cache
		postProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PostProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PostProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PostProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postProductPrimaryKeyMapping)
	sql := "DELETE FROM \"post_product\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from post_product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for post_product")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q postProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no postProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from post_product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for post_product")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(postProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"post_product\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from postProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for post_product")
	}

	if len(postProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PostProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"post_product\".* FROM \"post_product\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PostProductSlice")
	}

	*o = slice

	return nil
}

// PostProductExists checks if the PostProduct row exists.
func PostProductExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"post_product\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if post_product exists")
	}

	return exists, nil
}

// Exists checks if the PostProduct row exists.
func (o *PostProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PostProductExists(ctx, exec, o.ID)
}
