// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PostProductRelationship is an object representing the database table.
type PostProductRelationship struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	IsActive      bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	PostID        int64     `boil:"post_id" json:"post_id" toml:"post_id" yaml:"post_id"`
	PostProductID int64     `boil:"post_product_id" json:"post_product_id" toml:"post_product_id" yaml:"post_product_id"`

	R *postProductRelationshipR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postProductRelationshipL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostProductRelationshipColumns = struct {
	ID            string
	IsActive      string
	CreatedAt     string
	UpdatedAt     string
	PostID        string
	PostProductID string
}{
	ID:            "id",
	IsActive:      "is_active",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	PostID:        "post_id",
	PostProductID: "post_product_id",
}

var PostProductRelationshipTableColumns = struct {
	ID            string
	IsActive      string
	CreatedAt     string
	UpdatedAt     string
	PostID        string
	PostProductID string
}{
	ID:            "post_product_relationship.id",
	IsActive:      "post_product_relationship.is_active",
	CreatedAt:     "post_product_relationship.created_at",
	UpdatedAt:     "post_product_relationship.updated_at",
	PostID:        "post_product_relationship.post_id",
	PostProductID: "post_product_relationship.post_product_id",
}

// Generated where

var PostProductRelationshipWhere = struct {
	ID            whereHelperint64
	IsActive      whereHelperbool
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	PostID        whereHelperint64
	PostProductID whereHelperint64
}{
	ID:            whereHelperint64{field: "\"post_product_relationship\".\"id\""},
	IsActive:      whereHelperbool{field: "\"post_product_relationship\".\"is_active\""},
	CreatedAt:     whereHelpertime_Time{field: "\"post_product_relationship\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"post_product_relationship\".\"updated_at\""},
	PostID:        whereHelperint64{field: "\"post_product_relationship\".\"post_id\""},
	PostProductID: whereHelperint64{field: "\"post_product_relationship\".\"post_product_id\""},
}

// PostProductRelationshipRels is where relationship names are stored.
var PostProductRelationshipRels = struct {
	PostProduct string
	Post        string
}{
	PostProduct: "PostProduct",
	Post:        "Post",
}

// postProductRelationshipR is where relationships are stored.
type postProductRelationshipR struct {
	PostProduct *PostProduct `boil:"PostProduct" json:"PostProduct" toml:"PostProduct" yaml:"PostProduct"`
	Post        *Post        `boil:"Post" json:"Post" toml:"Post" yaml:"Post"`
}

// NewStruct creates a new relationship struct
func (*postProductRelationshipR) NewStruct() *postProductRelationshipR {
	return &postProductRelationshipR{}
}

func (r *postProductRelationshipR) GetPostProduct() *PostProduct {
	if r == nil {
		return nil
	}
	return r.PostProduct
}

func (r *postProductRelationshipR) GetPost() *Post {
	if r == nil {
		return nil
	}
	return r.Post
}

// postProductRelationshipL is where Load methods for each relationship are stored.
type postProductRelationshipL struct{}

var (
	postProductRelationshipAllColumns            = []string{"id", "is_active", "created_at", "updated_at", "post_id", "post_product_id"}
	postProductRelationshipColumnsWithoutDefault = []string{"is_active", "created_at", "updated_at", "post_id", "post_product_id"}
	postProductRelationshipColumnsWithDefault    = []string{"id"}
	postProductRelationshipPrimaryKeyColumns     = []string{"id"}
	postProductRelationshipGeneratedColumns      = []string{}
)

type (
	// PostProductRelationshipSlice is an alias for a slice of pointers to PostProductRelationship.
	// This should almost always be used instead of []PostProductRelationship.
	PostProductRelationshipSlice []*PostProductRelationship
	// PostProductRelationshipHook is the signature for custom PostProductRelationship hook methods
	PostProductRelationshipHook func(context.Context, boil.ContextExecutor, *PostProductRelationship) error

	postProductRelationshipQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postProductRelationshipType                 = reflect.TypeOf(&PostProductRelationship{})
	postProductRelationshipMapping              = queries.MakeStructMapping(postProductRelationshipType)
	postProductRelationshipPrimaryKeyMapping, _ = queries.BindMapping(postProductRelationshipType, postProductRelationshipMapping, postProductRelationshipPrimaryKeyColumns)
	postProductRelationshipInsertCacheMut       sync.RWMutex
	postProductRelationshipInsertCache          = make(map[string]insertCache)
	postProductRelationshipUpdateCacheMut       sync.RWMutex
	postProductRelationshipUpdateCache          = make(map[string]updateCache)
	postProductRelationshipUpsertCacheMut       sync.RWMutex
	postProductRelationshipUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var postProductRelationshipAfterSelectMu sync.Mutex
var postProductRelationshipAfterSelectHooks []PostProductRelationshipHook

var postProductRelationshipBeforeInsertMu sync.Mutex
var postProductRelationshipBeforeInsertHooks []PostProductRelationshipHook
var postProductRelationshipAfterInsertMu sync.Mutex
var postProductRelationshipAfterInsertHooks []PostProductRelationshipHook

var postProductRelationshipBeforeUpdateMu sync.Mutex
var postProductRelationshipBeforeUpdateHooks []PostProductRelationshipHook
var postProductRelationshipAfterUpdateMu sync.Mutex
var postProductRelationshipAfterUpdateHooks []PostProductRelationshipHook

var postProductRelationshipBeforeDeleteMu sync.Mutex
var postProductRelationshipBeforeDeleteHooks []PostProductRelationshipHook
var postProductRelationshipAfterDeleteMu sync.Mutex
var postProductRelationshipAfterDeleteHooks []PostProductRelationshipHook

var postProductRelationshipBeforeUpsertMu sync.Mutex
var postProductRelationshipBeforeUpsertHooks []PostProductRelationshipHook
var postProductRelationshipAfterUpsertMu sync.Mutex
var postProductRelationshipAfterUpsertHooks []PostProductRelationshipHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PostProductRelationship) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductRelationshipAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PostProductRelationship) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductRelationshipBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PostProductRelationship) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductRelationshipAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PostProductRelationship) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductRelationshipBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PostProductRelationship) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductRelationshipAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PostProductRelationship) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductRelationshipBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PostProductRelationship) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductRelationshipAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PostProductRelationship) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductRelationshipBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PostProductRelationship) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postProductRelationshipAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPostProductRelationshipHook registers your hook function for all future operations.
func AddPostProductRelationshipHook(hookPoint boil.HookPoint, postProductRelationshipHook PostProductRelationshipHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		postProductRelationshipAfterSelectMu.Lock()
		postProductRelationshipAfterSelectHooks = append(postProductRelationshipAfterSelectHooks, postProductRelationshipHook)
		postProductRelationshipAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		postProductRelationshipBeforeInsertMu.Lock()
		postProductRelationshipBeforeInsertHooks = append(postProductRelationshipBeforeInsertHooks, postProductRelationshipHook)
		postProductRelationshipBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		postProductRelationshipAfterInsertMu.Lock()
		postProductRelationshipAfterInsertHooks = append(postProductRelationshipAfterInsertHooks, postProductRelationshipHook)
		postProductRelationshipAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		postProductRelationshipBeforeUpdateMu.Lock()
		postProductRelationshipBeforeUpdateHooks = append(postProductRelationshipBeforeUpdateHooks, postProductRelationshipHook)
		postProductRelationshipBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		postProductRelationshipAfterUpdateMu.Lock()
		postProductRelationshipAfterUpdateHooks = append(postProductRelationshipAfterUpdateHooks, postProductRelationshipHook)
		postProductRelationshipAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		postProductRelationshipBeforeDeleteMu.Lock()
		postProductRelationshipBeforeDeleteHooks = append(postProductRelationshipBeforeDeleteHooks, postProductRelationshipHook)
		postProductRelationshipBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		postProductRelationshipAfterDeleteMu.Lock()
		postProductRelationshipAfterDeleteHooks = append(postProductRelationshipAfterDeleteHooks, postProductRelationshipHook)
		postProductRelationshipAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		postProductRelationshipBeforeUpsertMu.Lock()
		postProductRelationshipBeforeUpsertHooks = append(postProductRelationshipBeforeUpsertHooks, postProductRelationshipHook)
		postProductRelationshipBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		postProductRelationshipAfterUpsertMu.Lock()
		postProductRelationshipAfterUpsertHooks = append(postProductRelationshipAfterUpsertHooks, postProductRelationshipHook)
		postProductRelationshipAfterUpsertMu.Unlock()
	}
}

// One returns a single postProductRelationship record from the query.
func (q postProductRelationshipQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PostProductRelationship, error) {
	o := &PostProductRelationship{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for post_product_relationship")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PostProductRelationship records from the query.
func (q postProductRelationshipQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostProductRelationshipSlice, error) {
	var o []*PostProductRelationship

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PostProductRelationship slice")
	}

	if len(postProductRelationshipAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PostProductRelationship records in the query.
func (q postProductRelationshipQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count post_product_relationship rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q postProductRelationshipQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if post_product_relationship exists")
	}

	return count > 0, nil
}

// PostProduct pointed to by the foreign key.
func (o *PostProductRelationship) PostProduct(mods ...qm.QueryMod) postProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PostProductID),
	}

	queryMods = append(queryMods, mods...)

	return PostProducts(queryMods...)
}

// Post pointed to by the foreign key.
func (o *PostProductRelationship) Post(mods ...qm.QueryMod) postQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PostID),
	}

	queryMods = append(queryMods, mods...)

	return Posts(queryMods...)
}

// LoadPostProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postProductRelationshipL) LoadPostProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostProductRelationship interface{}, mods queries.Applicator) error {
	var slice []*PostProductRelationship
	var object *PostProductRelationship

	if singular {
		var ok bool
		object, ok = maybePostProductRelationship.(*PostProductRelationship)
		if !ok {
			object = new(PostProductRelationship)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostProductRelationship)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostProductRelationship))
			}
		}
	} else {
		s, ok := maybePostProductRelationship.(*[]*PostProductRelationship)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostProductRelationship)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostProductRelationship))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &postProductRelationshipR{}
		}
		args[object.PostProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postProductRelationshipR{}
			}

			args[obj.PostProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`post_product`),
		qm.WhereIn(`post_product.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PostProduct")
	}

	var resultSlice []*PostProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PostProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for post_product")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post_product")
	}

	if len(postProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PostProduct = foreign
		if foreign.R == nil {
			foreign.R = &postProductR{}
		}
		foreign.R.PostProductRelationships = append(foreign.R.PostProductRelationships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PostProductID == foreign.ID {
				local.R.PostProduct = foreign
				if foreign.R == nil {
					foreign.R = &postProductR{}
				}
				foreign.R.PostProductRelationships = append(foreign.R.PostProductRelationships, local)
				break
			}
		}
	}

	return nil
}

// LoadPost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postProductRelationshipL) LoadPost(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostProductRelationship interface{}, mods queries.Applicator) error {
	var slice []*PostProductRelationship
	var object *PostProductRelationship

	if singular {
		var ok bool
		object, ok = maybePostProductRelationship.(*PostProductRelationship)
		if !ok {
			object = new(PostProductRelationship)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostProductRelationship)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostProductRelationship))
			}
		}
	} else {
		s, ok := maybePostProductRelationship.(*[]*PostProductRelationship)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostProductRelationship)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostProductRelationship))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &postProductRelationshipR{}
		}
		args[object.PostID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postProductRelationshipR{}
			}

			args[obj.PostID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`post`),
		qm.WhereIn(`post.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for post")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Post = foreign
		if foreign.R == nil {
			foreign.R = &postR{}
		}
		foreign.R.PostProductRelationships = append(foreign.R.PostProductRelationships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PostID == foreign.ID {
				local.R.Post = foreign
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.PostProductRelationships = append(foreign.R.PostProductRelationships, local)
				break
			}
		}
	}

	return nil
}

// SetPostProduct of the postProductRelationship to the related item.
// Sets o.R.PostProduct to related.
// Adds o to related.R.PostProductRelationships.
func (o *PostProductRelationship) SetPostProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PostProduct) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"post_product_relationship\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"post_product_id"}),
		strmangle.WhereClause("\"", "\"", 2, postProductRelationshipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PostProductID = related.ID
	if o.R == nil {
		o.R = &postProductRelationshipR{
			PostProduct: related,
		}
	} else {
		o.R.PostProduct = related
	}

	if related.R == nil {
		related.R = &postProductR{
			PostProductRelationships: PostProductRelationshipSlice{o},
		}
	} else {
		related.R.PostProductRelationships = append(related.R.PostProductRelationships, o)
	}

	return nil
}

// SetPost of the postProductRelationship to the related item.
// Sets o.R.Post to related.
// Adds o to related.R.PostProductRelationships.
func (o *PostProductRelationship) SetPost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Post) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"post_product_relationship\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"post_id"}),
		strmangle.WhereClause("\"", "\"", 2, postProductRelationshipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PostID = related.ID
	if o.R == nil {
		o.R = &postProductRelationshipR{
			Post: related,
		}
	} else {
		o.R.Post = related
	}

	if related.R == nil {
		related.R = &postR{
			PostProductRelationships: PostProductRelationshipSlice{o},
		}
	} else {
		related.R.PostProductRelationships = append(related.R.PostProductRelationships, o)
	}

	return nil
}

// PostProductRelationships retrieves all the records using an executor.
func PostProductRelationships(mods ...qm.QueryMod) postProductRelationshipQuery {
	mods = append(mods, qm.From("\"post_product_relationship\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"post_product_relationship\".*"})
	}

	return postProductRelationshipQuery{q}
}

// FindPostProductRelationship retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostProductRelationship(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PostProductRelationship, error) {
	postProductRelationshipObj := &PostProductRelationship{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"post_product_relationship\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, postProductRelationshipObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from post_product_relationship")
	}

	if err = postProductRelationshipObj.doAfterSelectHooks(ctx, exec); err != nil {
		return postProductRelationshipObj, err
	}

	return postProductRelationshipObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PostProductRelationship) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no post_product_relationship provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postProductRelationshipColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postProductRelationshipInsertCacheMut.RLock()
	cache, cached := postProductRelationshipInsertCache[key]
	postProductRelationshipInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postProductRelationshipAllColumns,
			postProductRelationshipColumnsWithDefault,
			postProductRelationshipColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postProductRelationshipType, postProductRelationshipMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postProductRelationshipType, postProductRelationshipMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"post_product_relationship\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"post_product_relationship\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into post_product_relationship")
	}

	if !cached {
		postProductRelationshipInsertCacheMut.Lock()
		postProductRelationshipInsertCache[key] = cache
		postProductRelationshipInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PostProductRelationship.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PostProductRelationship) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	postProductRelationshipUpdateCacheMut.RLock()
	cache, cached := postProductRelationshipUpdateCache[key]
	postProductRelationshipUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postProductRelationshipAllColumns,
			postProductRelationshipPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update post_product_relationship, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"post_product_relationship\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, postProductRelationshipPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postProductRelationshipType, postProductRelationshipMapping, append(wl, postProductRelationshipPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update post_product_relationship row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for post_product_relationship")
	}

	if !cached {
		postProductRelationshipUpdateCacheMut.Lock()
		postProductRelationshipUpdateCache[key] = cache
		postProductRelationshipUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q postProductRelationshipQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for post_product_relationship")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for post_product_relationship")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostProductRelationshipSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postProductRelationshipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"post_product_relationship\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, postProductRelationshipPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in postProductRelationship slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all postProductRelationship")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PostProductRelationship) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no post_product_relationship provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postProductRelationshipColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postProductRelationshipUpsertCacheMut.RLock()
	cache, cached := postProductRelationshipUpsertCache[key]
	postProductRelationshipUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			postProductRelationshipAllColumns,
			postProductRelationshipColumnsWithDefault,
			postProductRelationshipColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			postProductRelationshipAllColumns,
			postProductRelationshipPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert post_product_relationship, could not build update column list")
		}

		ret := strmangle.SetComplement(postProductRelationshipAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(postProductRelationshipPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert post_product_relationship, could not build conflict column list")
			}

			conflict = make([]string, len(postProductRelationshipPrimaryKeyColumns))
			copy(conflict, postProductRelationshipPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"post_product_relationship\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(postProductRelationshipType, postProductRelationshipMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postProductRelationshipType, postProductRelationshipMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert post_product_relationship")
	}

	if !cached {
		postProductRelationshipUpsertCacheMut.Lock()
		postProductRelationshipUpsertCache[key] = cache
		postProductRelationshipUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PostProductRelationship record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PostProductRelationship) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PostProductRelationship provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postProductRelationshipPrimaryKeyMapping)
	sql := "DELETE FROM \"post_product_relationship\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from post_product_relationship")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for post_product_relationship")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q postProductRelationshipQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no postProductRelationshipQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from post_product_relationship")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for post_product_relationship")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostProductRelationshipSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(postProductRelationshipBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postProductRelationshipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"post_product_relationship\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postProductRelationshipPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from postProductRelationship slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for post_product_relationship")
	}

	if len(postProductRelationshipAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PostProductRelationship) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostProductRelationship(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostProductRelationshipSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostProductRelationshipSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postProductRelationshipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"post_product_relationship\".* FROM \"post_product_relationship\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postProductRelationshipPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PostProductRelationshipSlice")
	}

	*o = slice

	return nil
}

// PostProductRelationshipExists checks if the PostProductRelationship row exists.
func PostProductRelationshipExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"post_product_relationship\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if post_product_relationship exists")
	}

	return exists, nil
}

// Exists checks if the PostProductRelationship row exists.
func (o *PostProductRelationship) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PostProductRelationshipExists(ctx, exec, o.ID)
}
