// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SNSCUser is an object representing the database table.
type SNSCUser struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Password    string    `boil:"password" json:"password" toml:"password" yaml:"password"`
	LastLogin   null.Time `boil:"last_login" json:"last_login,omitempty" toml:"last_login" yaml:"last_login,omitempty"`
	IsSuperuser bool      `boil:"is_superuser" json:"is_superuser" toml:"is_superuser" yaml:"is_superuser"`
	Username    string    `boil:"username" json:"username" toml:"username" yaml:"username"`
	FirstName   string    `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName    string    `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	Email       string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	IsStaff     bool      `boil:"is_staff" json:"is_staff" toml:"is_staff" yaml:"is_staff"`
	IsActive    bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	DateJoined  time.Time `boil:"date_joined" json:"date_joined" toml:"date_joined" yaml:"date_joined"`

	R *snscUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L snscUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SNSCUserColumns = struct {
	ID          string
	Password    string
	LastLogin   string
	IsSuperuser string
	Username    string
	FirstName   string
	LastName    string
	Email       string
	IsStaff     string
	IsActive    string
	DateJoined  string
}{
	ID:          "id",
	Password:    "password",
	LastLogin:   "last_login",
	IsSuperuser: "is_superuser",
	Username:    "username",
	FirstName:   "first_name",
	LastName:    "last_name",
	Email:       "email",
	IsStaff:     "is_staff",
	IsActive:    "is_active",
	DateJoined:  "date_joined",
}

var SNSCUserTableColumns = struct {
	ID          string
	Password    string
	LastLogin   string
	IsSuperuser string
	Username    string
	FirstName   string
	LastName    string
	Email       string
	IsStaff     string
	IsActive    string
	DateJoined  string
}{
	ID:          "snsc_user.id",
	Password:    "snsc_user.password",
	LastLogin:   "snsc_user.last_login",
	IsSuperuser: "snsc_user.is_superuser",
	Username:    "snsc_user.username",
	FirstName:   "snsc_user.first_name",
	LastName:    "snsc_user.last_name",
	Email:       "snsc_user.email",
	IsStaff:     "snsc_user.is_staff",
	IsActive:    "snsc_user.is_active",
	DateJoined:  "snsc_user.date_joined",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SNSCUserWhere = struct {
	ID          whereHelperint64
	Password    whereHelperstring
	LastLogin   whereHelpernull_Time
	IsSuperuser whereHelperbool
	Username    whereHelperstring
	FirstName   whereHelperstring
	LastName    whereHelperstring
	Email       whereHelperstring
	IsStaff     whereHelperbool
	IsActive    whereHelperbool
	DateJoined  whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"snsc_user\".\"id\""},
	Password:    whereHelperstring{field: "\"snsc_user\".\"password\""},
	LastLogin:   whereHelpernull_Time{field: "\"snsc_user\".\"last_login\""},
	IsSuperuser: whereHelperbool{field: "\"snsc_user\".\"is_superuser\""},
	Username:    whereHelperstring{field: "\"snsc_user\".\"username\""},
	FirstName:   whereHelperstring{field: "\"snsc_user\".\"first_name\""},
	LastName:    whereHelperstring{field: "\"snsc_user\".\"last_name\""},
	Email:       whereHelperstring{field: "\"snsc_user\".\"email\""},
	IsStaff:     whereHelperbool{field: "\"snsc_user\".\"is_staff\""},
	IsActive:    whereHelperbool{field: "\"snsc_user\".\"is_active\""},
	DateJoined:  whereHelpertime_Time{field: "\"snsc_user\".\"date_joined\""},
}

// SNSCUserRels is where relationship names are stored.
var SNSCUserRels = struct {
	SiteOwnerships                  string
	SnscuserSNSCUserGroups          string
	SnscuserSNSCUserUserPermissions string
}{
	SiteOwnerships:                  "SiteOwnerships",
	SnscuserSNSCUserGroups:          "SnscuserSNSCUserGroups",
	SnscuserSNSCUserUserPermissions: "SnscuserSNSCUserUserPermissions",
}

// snscUserR is where relationships are stored.
type snscUserR struct {
	SiteOwnerships                  SiteOwnershipSlice          `boil:"SiteOwnerships" json:"SiteOwnerships" toml:"SiteOwnerships" yaml:"SiteOwnerships"`
	SnscuserSNSCUserGroups          SNSCUserGroupSlice          `boil:"SnscuserSNSCUserGroups" json:"SnscuserSNSCUserGroups" toml:"SnscuserSNSCUserGroups" yaml:"SnscuserSNSCUserGroups"`
	SnscuserSNSCUserUserPermissions SNSCUserUserPermissionSlice `boil:"SnscuserSNSCUserUserPermissions" json:"SnscuserSNSCUserUserPermissions" toml:"SnscuserSNSCUserUserPermissions" yaml:"SnscuserSNSCUserUserPermissions"`
}

// NewStruct creates a new relationship struct
func (*snscUserR) NewStruct() *snscUserR {
	return &snscUserR{}
}

func (r *snscUserR) GetSiteOwnerships() SiteOwnershipSlice {
	if r == nil {
		return nil
	}
	return r.SiteOwnerships
}

func (r *snscUserR) GetSnscuserSNSCUserGroups() SNSCUserGroupSlice {
	if r == nil {
		return nil
	}
	return r.SnscuserSNSCUserGroups
}

func (r *snscUserR) GetSnscuserSNSCUserUserPermissions() SNSCUserUserPermissionSlice {
	if r == nil {
		return nil
	}
	return r.SnscuserSNSCUserUserPermissions
}

// snscUserL is where Load methods for each relationship are stored.
type snscUserL struct{}

var (
	snscUserAllColumns            = []string{"id", "password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined"}
	snscUserColumnsWithoutDefault = []string{"password", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined"}
	snscUserColumnsWithDefault    = []string{"id", "last_login"}
	snscUserPrimaryKeyColumns     = []string{"id"}
	snscUserGeneratedColumns      = []string{}
)

type (
	// SNSCUserSlice is an alias for a slice of pointers to SNSCUser.
	// This should almost always be used instead of []SNSCUser.
	SNSCUserSlice []*SNSCUser
	// SNSCUserHook is the signature for custom SNSCUser hook methods
	SNSCUserHook func(context.Context, boil.ContextExecutor, *SNSCUser) error

	snscUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	snscUserType                 = reflect.TypeOf(&SNSCUser{})
	snscUserMapping              = queries.MakeStructMapping(snscUserType)
	snscUserPrimaryKeyMapping, _ = queries.BindMapping(snscUserType, snscUserMapping, snscUserPrimaryKeyColumns)
	snscUserInsertCacheMut       sync.RWMutex
	snscUserInsertCache          = make(map[string]insertCache)
	snscUserUpdateCacheMut       sync.RWMutex
	snscUserUpdateCache          = make(map[string]updateCache)
	snscUserUpsertCacheMut       sync.RWMutex
	snscUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var snscUserAfterSelectMu sync.Mutex
var snscUserAfterSelectHooks []SNSCUserHook

var snscUserBeforeInsertMu sync.Mutex
var snscUserBeforeInsertHooks []SNSCUserHook
var snscUserAfterInsertMu sync.Mutex
var snscUserAfterInsertHooks []SNSCUserHook

var snscUserBeforeUpdateMu sync.Mutex
var snscUserBeforeUpdateHooks []SNSCUserHook
var snscUserAfterUpdateMu sync.Mutex
var snscUserAfterUpdateHooks []SNSCUserHook

var snscUserBeforeDeleteMu sync.Mutex
var snscUserBeforeDeleteHooks []SNSCUserHook
var snscUserAfterDeleteMu sync.Mutex
var snscUserAfterDeleteHooks []SNSCUserHook

var snscUserBeforeUpsertMu sync.Mutex
var snscUserBeforeUpsertHooks []SNSCUserHook
var snscUserAfterUpsertMu sync.Mutex
var snscUserAfterUpsertHooks []SNSCUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SNSCUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SNSCUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SNSCUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SNSCUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SNSCUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SNSCUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SNSCUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SNSCUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SNSCUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range snscUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSNSCUserHook registers your hook function for all future operations.
func AddSNSCUserHook(hookPoint boil.HookPoint, snscUserHook SNSCUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		snscUserAfterSelectMu.Lock()
		snscUserAfterSelectHooks = append(snscUserAfterSelectHooks, snscUserHook)
		snscUserAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		snscUserBeforeInsertMu.Lock()
		snscUserBeforeInsertHooks = append(snscUserBeforeInsertHooks, snscUserHook)
		snscUserBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		snscUserAfterInsertMu.Lock()
		snscUserAfterInsertHooks = append(snscUserAfterInsertHooks, snscUserHook)
		snscUserAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		snscUserBeforeUpdateMu.Lock()
		snscUserBeforeUpdateHooks = append(snscUserBeforeUpdateHooks, snscUserHook)
		snscUserBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		snscUserAfterUpdateMu.Lock()
		snscUserAfterUpdateHooks = append(snscUserAfterUpdateHooks, snscUserHook)
		snscUserAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		snscUserBeforeDeleteMu.Lock()
		snscUserBeforeDeleteHooks = append(snscUserBeforeDeleteHooks, snscUserHook)
		snscUserBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		snscUserAfterDeleteMu.Lock()
		snscUserAfterDeleteHooks = append(snscUserAfterDeleteHooks, snscUserHook)
		snscUserAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		snscUserBeforeUpsertMu.Lock()
		snscUserBeforeUpsertHooks = append(snscUserBeforeUpsertHooks, snscUserHook)
		snscUserBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		snscUserAfterUpsertMu.Lock()
		snscUserAfterUpsertHooks = append(snscUserAfterUpsertHooks, snscUserHook)
		snscUserAfterUpsertMu.Unlock()
	}
}

// One returns a single snscUser record from the query.
func (q snscUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SNSCUser, error) {
	o := &SNSCUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for snsc_user")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SNSCUser records from the query.
func (q snscUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (SNSCUserSlice, error) {
	var o []*SNSCUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SNSCUser slice")
	}

	if len(snscUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SNSCUser records in the query.
func (q snscUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count snsc_user rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q snscUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if snsc_user exists")
	}

	return count > 0, nil
}

// SiteOwnerships retrieves all the site_ownership's SiteOwnerships with an executor.
func (o *SNSCUser) SiteOwnerships(mods ...qm.QueryMod) siteOwnershipQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"site_ownership\".\"snsc_user_id\"=?", o.ID),
	)

	return SiteOwnerships(queryMods...)
}

// SnscuserSNSCUserGroups retrieves all the snsc_user_group's SNSCUserGroups with an executor via snscuser_id column.
func (o *SNSCUser) SnscuserSNSCUserGroups(mods ...qm.QueryMod) snscUserGroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"snsc_user_groups\".\"snscuser_id\"=?", o.ID),
	)

	return SNSCUserGroups(queryMods...)
}

// SnscuserSNSCUserUserPermissions retrieves all the snsc_user_user_permission's SNSCUserUserPermissions with an executor via snscuser_id column.
func (o *SNSCUser) SnscuserSNSCUserUserPermissions(mods ...qm.QueryMod) snscUserUserPermissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"snsc_user_user_permissions\".\"snscuser_id\"=?", o.ID),
	)

	return SNSCUserUserPermissions(queryMods...)
}

// LoadSiteOwnerships allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (snscUserL) LoadSiteOwnerships(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSNSCUser interface{}, mods queries.Applicator) error {
	var slice []*SNSCUser
	var object *SNSCUser

	if singular {
		var ok bool
		object, ok = maybeSNSCUser.(*SNSCUser)
		if !ok {
			object = new(SNSCUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSNSCUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSNSCUser))
			}
		}
	} else {
		s, ok := maybeSNSCUser.(*[]*SNSCUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSNSCUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSNSCUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &snscUserR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &snscUserR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`site_ownership`),
		qm.WhereIn(`site_ownership.snsc_user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load site_ownership")
	}

	var resultSlice []*SiteOwnership
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice site_ownership")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on site_ownership")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for site_ownership")
	}

	if len(siteOwnershipAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SiteOwnerships = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &siteOwnershipR{}
			}
			foreign.R.SNSCUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SNSCUserID {
				local.R.SiteOwnerships = append(local.R.SiteOwnerships, foreign)
				if foreign.R == nil {
					foreign.R = &siteOwnershipR{}
				}
				foreign.R.SNSCUser = local
				break
			}
		}
	}

	return nil
}

// LoadSnscuserSNSCUserGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (snscUserL) LoadSnscuserSNSCUserGroups(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSNSCUser interface{}, mods queries.Applicator) error {
	var slice []*SNSCUser
	var object *SNSCUser

	if singular {
		var ok bool
		object, ok = maybeSNSCUser.(*SNSCUser)
		if !ok {
			object = new(SNSCUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSNSCUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSNSCUser))
			}
		}
	} else {
		s, ok := maybeSNSCUser.(*[]*SNSCUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSNSCUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSNSCUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &snscUserR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &snscUserR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`snsc_user_groups`),
		qm.WhereIn(`snsc_user_groups.snscuser_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load snsc_user_groups")
	}

	var resultSlice []*SNSCUserGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice snsc_user_groups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on snsc_user_groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for snsc_user_groups")
	}

	if len(snscUserGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SnscuserSNSCUserGroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &snscUserGroupR{}
			}
			foreign.R.Snscuser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SnscuserID {
				local.R.SnscuserSNSCUserGroups = append(local.R.SnscuserSNSCUserGroups, foreign)
				if foreign.R == nil {
					foreign.R = &snscUserGroupR{}
				}
				foreign.R.Snscuser = local
				break
			}
		}
	}

	return nil
}

// LoadSnscuserSNSCUserUserPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (snscUserL) LoadSnscuserSNSCUserUserPermissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSNSCUser interface{}, mods queries.Applicator) error {
	var slice []*SNSCUser
	var object *SNSCUser

	if singular {
		var ok bool
		object, ok = maybeSNSCUser.(*SNSCUser)
		if !ok {
			object = new(SNSCUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSNSCUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSNSCUser))
			}
		}
	} else {
		s, ok := maybeSNSCUser.(*[]*SNSCUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSNSCUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSNSCUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &snscUserR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &snscUserR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`snsc_user_user_permissions`),
		qm.WhereIn(`snsc_user_user_permissions.snscuser_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load snsc_user_user_permissions")
	}

	var resultSlice []*SNSCUserUserPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice snsc_user_user_permissions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on snsc_user_user_permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for snsc_user_user_permissions")
	}

	if len(snscUserUserPermissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SnscuserSNSCUserUserPermissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &snscUserUserPermissionR{}
			}
			foreign.R.Snscuser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SnscuserID {
				local.R.SnscuserSNSCUserUserPermissions = append(local.R.SnscuserSNSCUserUserPermissions, foreign)
				if foreign.R == nil {
					foreign.R = &snscUserUserPermissionR{}
				}
				foreign.R.Snscuser = local
				break
			}
		}
	}

	return nil
}

// AddSiteOwnerships adds the given related objects to the existing relationships
// of the snsc_user, optionally inserting them as new records.
// Appends related to o.R.SiteOwnerships.
// Sets related.R.SNSCUser appropriately.
func (o *SNSCUser) AddSiteOwnerships(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SiteOwnership) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SNSCUserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"site_ownership\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"snsc_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, siteOwnershipPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SNSCUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &snscUserR{
			SiteOwnerships: related,
		}
	} else {
		o.R.SiteOwnerships = append(o.R.SiteOwnerships, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &siteOwnershipR{
				SNSCUser: o,
			}
		} else {
			rel.R.SNSCUser = o
		}
	}
	return nil
}

// AddSnscuserSNSCUserGroups adds the given related objects to the existing relationships
// of the snsc_user, optionally inserting them as new records.
// Appends related to o.R.SnscuserSNSCUserGroups.
// Sets related.R.Snscuser appropriately.
func (o *SNSCUser) AddSnscuserSNSCUserGroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SNSCUserGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SnscuserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"snsc_user_groups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"snscuser_id"}),
				strmangle.WhereClause("\"", "\"", 2, snscUserGroupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SnscuserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &snscUserR{
			SnscuserSNSCUserGroups: related,
		}
	} else {
		o.R.SnscuserSNSCUserGroups = append(o.R.SnscuserSNSCUserGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &snscUserGroupR{
				Snscuser: o,
			}
		} else {
			rel.R.Snscuser = o
		}
	}
	return nil
}

// AddSnscuserSNSCUserUserPermissions adds the given related objects to the existing relationships
// of the snsc_user, optionally inserting them as new records.
// Appends related to o.R.SnscuserSNSCUserUserPermissions.
// Sets related.R.Snscuser appropriately.
func (o *SNSCUser) AddSnscuserSNSCUserUserPermissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SNSCUserUserPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SnscuserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"snsc_user_user_permissions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"snscuser_id"}),
				strmangle.WhereClause("\"", "\"", 2, snscUserUserPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SnscuserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &snscUserR{
			SnscuserSNSCUserUserPermissions: related,
		}
	} else {
		o.R.SnscuserSNSCUserUserPermissions = append(o.R.SnscuserSNSCUserUserPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &snscUserUserPermissionR{
				Snscuser: o,
			}
		} else {
			rel.R.Snscuser = o
		}
	}
	return nil
}

// SNSCUsers retrieves all the records using an executor.
func SNSCUsers(mods ...qm.QueryMod) snscUserQuery {
	mods = append(mods, qm.From("\"snsc_user\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"snsc_user\".*"})
	}

	return snscUserQuery{q}
}

// FindSNSCUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSNSCUser(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SNSCUser, error) {
	snscUserObj := &SNSCUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"snsc_user\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, snscUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from snsc_user")
	}

	if err = snscUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return snscUserObj, err
	}

	return snscUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SNSCUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no snsc_user provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(snscUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	snscUserInsertCacheMut.RLock()
	cache, cached := snscUserInsertCache[key]
	snscUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			snscUserAllColumns,
			snscUserColumnsWithDefault,
			snscUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(snscUserType, snscUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(snscUserType, snscUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"snsc_user\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"snsc_user\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into snsc_user")
	}

	if !cached {
		snscUserInsertCacheMut.Lock()
		snscUserInsertCache[key] = cache
		snscUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SNSCUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SNSCUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	snscUserUpdateCacheMut.RLock()
	cache, cached := snscUserUpdateCache[key]
	snscUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			snscUserAllColumns,
			snscUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update snsc_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"snsc_user\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, snscUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(snscUserType, snscUserMapping, append(wl, snscUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update snsc_user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for snsc_user")
	}

	if !cached {
		snscUserUpdateCacheMut.Lock()
		snscUserUpdateCache[key] = cache
		snscUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q snscUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for snsc_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for snsc_user")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SNSCUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snscUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"snsc_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, snscUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in snscUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all snscUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SNSCUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no snsc_user provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(snscUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	snscUserUpsertCacheMut.RLock()
	cache, cached := snscUserUpsertCache[key]
	snscUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			snscUserAllColumns,
			snscUserColumnsWithDefault,
			snscUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			snscUserAllColumns,
			snscUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert snsc_user, could not build update column list")
		}

		ret := strmangle.SetComplement(snscUserAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(snscUserPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert snsc_user, could not build conflict column list")
			}

			conflict = make([]string, len(snscUserPrimaryKeyColumns))
			copy(conflict, snscUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"snsc_user\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(snscUserType, snscUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(snscUserType, snscUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert snsc_user")
	}

	if !cached {
		snscUserUpsertCacheMut.Lock()
		snscUserUpsertCache[key] = cache
		snscUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SNSCUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SNSCUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SNSCUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), snscUserPrimaryKeyMapping)
	sql := "DELETE FROM \"snsc_user\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from snsc_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for snsc_user")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q snscUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no snscUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from snsc_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for snsc_user")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SNSCUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(snscUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snscUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"snsc_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, snscUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from snscUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for snsc_user")
	}

	if len(snscUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SNSCUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSNSCUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SNSCUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SNSCUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), snscUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"snsc_user\".* FROM \"snsc_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, snscUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SNSCUserSlice")
	}

	*o = slice

	return nil
}

// SNSCUserExists checks if the SNSCUser row exists.
func SNSCUserExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"snsc_user\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if snsc_user exists")
	}

	return exists, nil
}

// Exists checks if the SNSCUser row exists.
func (o *SNSCUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SNSCUserExists(ctx, exec, o.ID)
}
