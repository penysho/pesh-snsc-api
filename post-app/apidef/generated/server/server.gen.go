// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// DomainError エラーレスポンス
type DomainError struct {
	Errors string `json:"errors"`
}

// GetPostResponse 投稿詳細レスポンス
type GetPostResponse struct {
	// Post 投稿情報
	Post Post `json:"post"`
}

// Post 投稿情報
type Post struct {
	// Caption 投稿詳細文
	Caption string `json:"caption"`

	// CommentsCount コメント数
	CommentsCount int `json:"commentsCount"`

	// Id 投稿ID
	Id int `json:"id"`

	// LikeCount いいね数
	LikeCount int `json:"likeCount"`

	// Permalink https://example.com/000POSTID001
	Permalink string `json:"permalink"`

	// PostedAt 投稿日時
	PostedAt time.Time `json:"postedAt"`

	// Title 投稿タイトル
	Title string `json:"title"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 投稿詳細情報の取得
	// (GET /post-app/post/{postId})
	GetPost(c *gin.Context, postId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetPost operation middleware
func (siw *ServerInterfaceWrapper) GetPost(c *gin.Context) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithOptions("simple", "postId", c.Param("postId"), &postId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter postId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPost(c, postId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/post-app/post/:postId", wrapper.GetPost)
}
