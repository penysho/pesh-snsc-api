// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PostMedium is an object representing the database table.
type PostMedium struct {
	ID              int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Type            string      `boil:"type" json:"type" toml:"type" yaml:"type"`
	SNSURL          null.String `boil:"sns_url" json:"sns_url,omitempty" toml:"sns_url" yaml:"sns_url,omitempty"`
	HostedListURL   null.String `boil:"hosted_list_url" json:"hosted_list_url,omitempty" toml:"hosted_list_url" yaml:"hosted_list_url,omitempty"`
	HostedDetailURL string      `boil:"hosted_detail_url" json:"hosted_detail_url" toml:"hosted_detail_url" yaml:"hosted_detail_url"`
	IsActive        bool        `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	PostID          int64       `boil:"post_id" json:"post_id" toml:"post_id" yaml:"post_id"`
	ListOrder       int16       `boil:"list_order" json:"list_order" toml:"list_order" yaml:"list_order"`

	R *postMediumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postMediumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostMediumColumns = struct {
	ID              string
	Type            string
	SNSURL          string
	HostedListURL   string
	HostedDetailURL string
	IsActive        string
	CreatedAt       string
	UpdatedAt       string
	PostID          string
	ListOrder       string
}{
	ID:              "id",
	Type:            "type",
	SNSURL:          "sns_url",
	HostedListURL:   "hosted_list_url",
	HostedDetailURL: "hosted_detail_url",
	IsActive:        "is_active",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	PostID:          "post_id",
	ListOrder:       "list_order",
}

var PostMediumTableColumns = struct {
	ID              string
	Type            string
	SNSURL          string
	HostedListURL   string
	HostedDetailURL string
	IsActive        string
	CreatedAt       string
	UpdatedAt       string
	PostID          string
	ListOrder       string
}{
	ID:              "post_media.id",
	Type:            "post_media.type",
	SNSURL:          "post_media.sns_url",
	HostedListURL:   "post_media.hosted_list_url",
	HostedDetailURL: "post_media.hosted_detail_url",
	IsActive:        "post_media.is_active",
	CreatedAt:       "post_media.created_at",
	UpdatedAt:       "post_media.updated_at",
	PostID:          "post_media.post_id",
	ListOrder:       "post_media.list_order",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PostMediumWhere = struct {
	ID              whereHelperint64
	Type            whereHelperstring
	SNSURL          whereHelpernull_String
	HostedListURL   whereHelpernull_String
	HostedDetailURL whereHelperstring
	IsActive        whereHelperbool
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	PostID          whereHelperint64
	ListOrder       whereHelperint16
}{
	ID:              whereHelperint64{field: "\"post_media\".\"id\""},
	Type:            whereHelperstring{field: "\"post_media\".\"type\""},
	SNSURL:          whereHelpernull_String{field: "\"post_media\".\"sns_url\""},
	HostedListURL:   whereHelpernull_String{field: "\"post_media\".\"hosted_list_url\""},
	HostedDetailURL: whereHelperstring{field: "\"post_media\".\"hosted_detail_url\""},
	IsActive:        whereHelperbool{field: "\"post_media\".\"is_active\""},
	CreatedAt:       whereHelpertime_Time{field: "\"post_media\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"post_media\".\"updated_at\""},
	PostID:          whereHelperint64{field: "\"post_media\".\"post_id\""},
	ListOrder:       whereHelperint16{field: "\"post_media\".\"list_order\""},
}

// PostMediumRels is where relationship names are stored.
var PostMediumRels = struct {
	Post string
}{
	Post: "Post",
}

// postMediumR is where relationships are stored.
type postMediumR struct {
	Post *Post `boil:"Post" json:"Post" toml:"Post" yaml:"Post"`
}

// NewStruct creates a new relationship struct
func (*postMediumR) NewStruct() *postMediumR {
	return &postMediumR{}
}

func (r *postMediumR) GetPost() *Post {
	if r == nil {
		return nil
	}
	return r.Post
}

// postMediumL is where Load methods for each relationship are stored.
type postMediumL struct{}

var (
	postMediumAllColumns            = []string{"id", "type", "sns_url", "hosted_list_url", "hosted_detail_url", "is_active", "created_at", "updated_at", "post_id", "list_order"}
	postMediumColumnsWithoutDefault = []string{"type", "hosted_detail_url", "is_active", "created_at", "updated_at", "post_id", "list_order"}
	postMediumColumnsWithDefault    = []string{"id", "sns_url", "hosted_list_url"}
	postMediumPrimaryKeyColumns     = []string{"id"}
	postMediumGeneratedColumns      = []string{}
)

type (
	// PostMediumSlice is an alias for a slice of pointers to PostMedium.
	// This should almost always be used instead of []PostMedium.
	PostMediumSlice []*PostMedium
	// PostMediumHook is the signature for custom PostMedium hook methods
	PostMediumHook func(context.Context, boil.ContextExecutor, *PostMedium) error

	postMediumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postMediumType                 = reflect.TypeOf(&PostMedium{})
	postMediumMapping              = queries.MakeStructMapping(postMediumType)
	postMediumPrimaryKeyMapping, _ = queries.BindMapping(postMediumType, postMediumMapping, postMediumPrimaryKeyColumns)
	postMediumInsertCacheMut       sync.RWMutex
	postMediumInsertCache          = make(map[string]insertCache)
	postMediumUpdateCacheMut       sync.RWMutex
	postMediumUpdateCache          = make(map[string]updateCache)
	postMediumUpsertCacheMut       sync.RWMutex
	postMediumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var postMediumAfterSelectMu sync.Mutex
var postMediumAfterSelectHooks []PostMediumHook

var postMediumBeforeInsertMu sync.Mutex
var postMediumBeforeInsertHooks []PostMediumHook
var postMediumAfterInsertMu sync.Mutex
var postMediumAfterInsertHooks []PostMediumHook

var postMediumBeforeUpdateMu sync.Mutex
var postMediumBeforeUpdateHooks []PostMediumHook
var postMediumAfterUpdateMu sync.Mutex
var postMediumAfterUpdateHooks []PostMediumHook

var postMediumBeforeDeleteMu sync.Mutex
var postMediumBeforeDeleteHooks []PostMediumHook
var postMediumAfterDeleteMu sync.Mutex
var postMediumAfterDeleteHooks []PostMediumHook

var postMediumBeforeUpsertMu sync.Mutex
var postMediumBeforeUpsertHooks []PostMediumHook
var postMediumAfterUpsertMu sync.Mutex
var postMediumAfterUpsertHooks []PostMediumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PostMedium) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postMediumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PostMedium) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postMediumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PostMedium) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postMediumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PostMedium) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postMediumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PostMedium) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postMediumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PostMedium) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postMediumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PostMedium) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postMediumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PostMedium) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postMediumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PostMedium) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postMediumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPostMediumHook registers your hook function for all future operations.
func AddPostMediumHook(hookPoint boil.HookPoint, postMediumHook PostMediumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		postMediumAfterSelectMu.Lock()
		postMediumAfterSelectHooks = append(postMediumAfterSelectHooks, postMediumHook)
		postMediumAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		postMediumBeforeInsertMu.Lock()
		postMediumBeforeInsertHooks = append(postMediumBeforeInsertHooks, postMediumHook)
		postMediumBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		postMediumAfterInsertMu.Lock()
		postMediumAfterInsertHooks = append(postMediumAfterInsertHooks, postMediumHook)
		postMediumAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		postMediumBeforeUpdateMu.Lock()
		postMediumBeforeUpdateHooks = append(postMediumBeforeUpdateHooks, postMediumHook)
		postMediumBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		postMediumAfterUpdateMu.Lock()
		postMediumAfterUpdateHooks = append(postMediumAfterUpdateHooks, postMediumHook)
		postMediumAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		postMediumBeforeDeleteMu.Lock()
		postMediumBeforeDeleteHooks = append(postMediumBeforeDeleteHooks, postMediumHook)
		postMediumBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		postMediumAfterDeleteMu.Lock()
		postMediumAfterDeleteHooks = append(postMediumAfterDeleteHooks, postMediumHook)
		postMediumAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		postMediumBeforeUpsertMu.Lock()
		postMediumBeforeUpsertHooks = append(postMediumBeforeUpsertHooks, postMediumHook)
		postMediumBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		postMediumAfterUpsertMu.Lock()
		postMediumAfterUpsertHooks = append(postMediumAfterUpsertHooks, postMediumHook)
		postMediumAfterUpsertMu.Unlock()
	}
}

// One returns a single postMedium record from the query.
func (q postMediumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PostMedium, error) {
	o := &PostMedium{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for post_media")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PostMedium records from the query.
func (q postMediumQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostMediumSlice, error) {
	var o []*PostMedium

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PostMedium slice")
	}

	if len(postMediumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PostMedium records in the query.
func (q postMediumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count post_media rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q postMediumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if post_media exists")
	}

	return count > 0, nil
}

// Post pointed to by the foreign key.
func (o *PostMedium) Post(mods ...qm.QueryMod) postQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PostID),
	}

	queryMods = append(queryMods, mods...)

	return Posts(queryMods...)
}

// LoadPost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postMediumL) LoadPost(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostMedium interface{}, mods queries.Applicator) error {
	var slice []*PostMedium
	var object *PostMedium

	if singular {
		var ok bool
		object, ok = maybePostMedium.(*PostMedium)
		if !ok {
			object = new(PostMedium)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostMedium))
			}
		}
	} else {
		s, ok := maybePostMedium.(*[]*PostMedium)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostMedium))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &postMediumR{}
		}
		args[object.PostID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postMediumR{}
			}

			args[obj.PostID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`post`),
		qm.WhereIn(`post.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for post")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Post = foreign
		if foreign.R == nil {
			foreign.R = &postR{}
		}
		foreign.R.PostMedia = append(foreign.R.PostMedia, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PostID == foreign.ID {
				local.R.Post = foreign
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.PostMedia = append(foreign.R.PostMedia, local)
				break
			}
		}
	}

	return nil
}

// SetPost of the postMedium to the related item.
// Sets o.R.Post to related.
// Adds o to related.R.PostMedia.
func (o *PostMedium) SetPost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Post) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"post_media\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"post_id"}),
		strmangle.WhereClause("\"", "\"", 2, postMediumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PostID = related.ID
	if o.R == nil {
		o.R = &postMediumR{
			Post: related,
		}
	} else {
		o.R.Post = related
	}

	if related.R == nil {
		related.R = &postR{
			PostMedia: PostMediumSlice{o},
		}
	} else {
		related.R.PostMedia = append(related.R.PostMedia, o)
	}

	return nil
}

// PostMedia retrieves all the records using an executor.
func PostMedia(mods ...qm.QueryMod) postMediumQuery {
	mods = append(mods, qm.From("\"post_media\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"post_media\".*"})
	}

	return postMediumQuery{q}
}

// FindPostMedium retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostMedium(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PostMedium, error) {
	postMediumObj := &PostMedium{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"post_media\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, postMediumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from post_media")
	}

	if err = postMediumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return postMediumObj, err
	}

	return postMediumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PostMedium) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no post_media provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postMediumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postMediumInsertCacheMut.RLock()
	cache, cached := postMediumInsertCache[key]
	postMediumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postMediumAllColumns,
			postMediumColumnsWithDefault,
			postMediumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postMediumType, postMediumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postMediumType, postMediumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"post_media\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"post_media\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into post_media")
	}

	if !cached {
		postMediumInsertCacheMut.Lock()
		postMediumInsertCache[key] = cache
		postMediumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PostMedium.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PostMedium) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	postMediumUpdateCacheMut.RLock()
	cache, cached := postMediumUpdateCache[key]
	postMediumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postMediumAllColumns,
			postMediumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update post_media, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"post_media\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, postMediumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postMediumType, postMediumMapping, append(wl, postMediumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update post_media row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for post_media")
	}

	if !cached {
		postMediumUpdateCacheMut.Lock()
		postMediumUpdateCache[key] = cache
		postMediumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q postMediumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for post_media")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for post_media")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostMediumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postMediumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"post_media\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, postMediumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in postMedium slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all postMedium")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PostMedium) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no post_media provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postMediumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postMediumUpsertCacheMut.RLock()
	cache, cached := postMediumUpsertCache[key]
	postMediumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			postMediumAllColumns,
			postMediumColumnsWithDefault,
			postMediumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			postMediumAllColumns,
			postMediumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert post_media, could not build update column list")
		}

		ret := strmangle.SetComplement(postMediumAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(postMediumPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert post_media, could not build conflict column list")
			}

			conflict = make([]string, len(postMediumPrimaryKeyColumns))
			copy(conflict, postMediumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"post_media\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(postMediumType, postMediumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postMediumType, postMediumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert post_media")
	}

	if !cached {
		postMediumUpsertCacheMut.Lock()
		postMediumUpsertCache[key] = cache
		postMediumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PostMedium record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PostMedium) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PostMedium provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postMediumPrimaryKeyMapping)
	sql := "DELETE FROM \"post_media\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from post_media")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for post_media")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q postMediumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no postMediumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from post_media")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for post_media")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostMediumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(postMediumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postMediumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"post_media\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postMediumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from postMedium slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for post_media")
	}

	if len(postMediumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PostMedium) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostMedium(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostMediumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostMediumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postMediumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"post_media\".* FROM \"post_media\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postMediumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PostMediumSlice")
	}

	*o = slice

	return nil
}

// PostMediumExists checks if the PostMedium row exists.
func PostMediumExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"post_media\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if post_media exists")
	}

	return exists, nil
}

// Exists checks if the PostMedium row exists.
func (o *PostMedium) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PostMediumExists(ctx, exec, o.ID)
}
